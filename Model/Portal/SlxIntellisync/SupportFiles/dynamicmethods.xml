<?xml version="1.0" encoding="utf-8"?>
<dynamicMethodConfiguration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <dynamicMethods>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexStatistics.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexStatistics.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexStatistics.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexStatistics.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexStatistics.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexStatistics.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexStatistics.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexStatistics.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexStatistics.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexStatistics.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexStatistics.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexStatistics.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexStatistics.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexStatistics.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexSchedule.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexSchedule.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexSchedule.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexSchedule.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexSchedule.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexSchedule.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexSchedule.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexSchedule.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexSchedule.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexSchedule.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexSchedule.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexSchedule.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexSchedule.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexSchedule.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexGeneral.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexGeneral.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexGeneral.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexGeneral.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexGeneral.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexGeneral.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexGeneral.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexGeneral.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexGeneral.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexGeneral.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexGeneral.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexGeneral.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexGeneral.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexGeneral.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexDefinition.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexDefinition.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexDefinition.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexDefinition.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexDefinition.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexDefinition.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexDefinition.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexDefinition.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexDefinition.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexDefinition.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexDefinition.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexDefinition.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="IndexDefinition.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="IndexDefinition.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserRole.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserRole.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserRole.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserRole.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserRole.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserRole.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserRole.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserRole.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserRole.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserRole.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserRole.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserRole.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserRole.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserRole.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserProfile.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserProfile.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserProfile.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserProfile.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserProfile.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserProfile.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserProfile.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserProfile.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserProfile.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserProfile.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserProfile.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserProfile.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserProfile.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserProfile.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserInfo.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserInfo.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserInfo.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserInfo.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserInfo.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserInfo.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserInfo.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserInfo.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserInfo.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserInfo.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserInfo.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserInfo.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserInfo.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserInfo.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="User.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="User.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="User.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="User.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="User.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="User.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="User.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="User.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="User.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="User.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="User.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="User.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="User.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="User.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Role.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Role.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Role.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Role.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Role.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Role.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Role.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Role.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Role.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Role.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Role.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Role.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Role.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Role.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OwnerSecurityProfile.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OwnerSecurityProfile.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OwnerSecurityProfile.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OwnerSecurityProfile.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OwnerSecurityProfile.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OwnerSecurityProfile.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OwnerSecurityProfile.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OwnerSecurityProfile.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OwnerSecurityProfile.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OwnerSecurityProfile.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OwnerSecurityProfile.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OwnerSecurityProfile.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OwnerSecurityProfile.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OwnerSecurityProfile.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OwnerRights.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OwnerRights.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OwnerRights.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OwnerRights.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OwnerRights.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OwnerRights.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OwnerRights.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OwnerRights.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OwnerRights.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OwnerRights.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OwnerRights.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OwnerRights.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OwnerRights.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OwnerRights.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Owner.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Owner.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Owner.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Owner.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Owner.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Owner.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Owner.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Owner.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Owner.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Owner.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Owner.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Owner.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Owner.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Owner.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SystemInformation.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SystemInformation.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SystemInformation.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SystemInformation.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SystemInformation.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SystemInformation.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SystemInformation.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SystemInformation.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SystemInformation.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SystemInformation.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SystemInformation.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SystemInformation.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SystemInformation.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SystemInformation.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SiteOptions.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SiteOptions.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SiteOptions.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SiteOptions.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SiteOptions.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SiteOptions.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SiteOptions.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SiteOptions.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SiteOptions.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SiteOptions.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SiteOptions.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SiteOptions.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SiteOptions.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SiteOptions.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="BranchOptions.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="BranchOptions.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="BranchOptions.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="BranchOptions.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="BranchOptions.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="BranchOptions.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="BranchOptions.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="BranchOptions.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="BranchOptions.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="BranchOptions.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="BranchOptions.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="BranchOptions.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="BranchOptions.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="BranchOptions.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Urgency.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Urgency.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Urgency.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Urgency.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Urgency.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Urgency.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Urgency.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Urgency.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Urgency.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Urgency.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Urgency.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Urgency.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Urgency.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Urgency.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketSolutionType.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketSolutionType.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketSolutionType.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketSolutionType.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketSolutionType.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketSolutionType.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketSolutionType.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketSolutionType.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketSolutionType.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketSolutionType.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketSolutionType.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketSolutionType.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketSolutionType.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketSolutionType.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketSolution.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketSolution.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketSolution.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketSolution.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketSolution.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketSolution.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketSolution.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketSolution.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketSolution.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketSolution.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketSolution.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketSolution.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketSolution.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketSolution.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblemType.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblemType.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblemType.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblemType.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblemType.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblemType.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblemType.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblemType.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblemType.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblemType.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblemType.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblemType.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblemType.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblemType.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblemSolutionType.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblemSolutionType.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblemSolutionType.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblemSolutionType.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblemSolutionType.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblemSolutionType.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblemSolutionType.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblemSolutionType.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblemSolutionType.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblemSolutionType.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblemSolutionType.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblemSolutionType.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblemSolutionType.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblemSolutionType.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblem.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblem.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblem.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblem.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblem.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblem.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblem.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblem.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblem.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblem.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblem.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblem.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketProblem.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketProblem.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketHistory.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketHistory.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketHistory.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketHistory.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketHistory.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketHistory.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketHistory.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketHistory.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketHistory.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketHistory.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketHistory.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketHistory.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketHistory.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketHistory.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketAreaOwner.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketAreaOwner.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketAreaOwner.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketAreaOwner.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketAreaOwner.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketAreaOwner.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketAreaOwner.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketAreaOwner.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketAreaOwner.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketAreaOwner.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketAreaOwner.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketAreaOwner.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketAreaOwner.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketAreaOwner.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivityRate.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivityRate.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivityRate.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivityRate.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivityRate.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivityRate.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivityRate.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivityRate.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivityRate.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivityRate.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivityRate.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivityRate.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivityRate.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivityRate.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivityItem.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivityItem.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivityItem.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivityItem.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivityItem.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivityItem.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivityItem.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivityItem.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivityItem.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivityItem.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivityItem.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivityItem.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivityItem.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivityItem.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivity.AddTicketActivity" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.TicketActivity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddTicketActivity" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivity.AddTicketActivityCommentsTimeStamp" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.TicketActivity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddTicketActivityCommentsTimeStamp" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivity.AddTicketActivityEx" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.TicketActivity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddTicketActivityEx" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivity.CompleteTicketActivity" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.TicketActivity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CompleteTicketActivity" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivity.DoTicketActivityCalculations" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.TicketActivity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="DoTicketActivityCalculations" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivity.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivity.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivity.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivity.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivity.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivity.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivity.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivity.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivity.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.TicketActivity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivity.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivity.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.TicketActivity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivity.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketActivity.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.TicketActivity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketActivity.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketAccountProduct.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketAccountProduct.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketAccountProduct.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketAccountProduct.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketAccountProduct.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketAccountProduct.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketAccountProduct.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketAccountProduct.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketAccountProduct.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketAccountProduct.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketAccountProduct.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketAccountProduct.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TicketAccountProduct.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TicketAccountProduct.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.AddTicketActivityCommentsTimeStamp" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddTicketActivityCommentsTimeStamp" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.AddTicketInternalTimeStamp" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddTicketInternalTimeStamp" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.AddTicketProblemTimeStamp" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddTicketProblemTimeStamp" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.AddTicketSolutionTimeStamp" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddTicketSolutionTimeStamp" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.CanCloseTicket" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CanCloseTicket" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.CheckForContractIncidents" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CheckForContractIncidents" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.CloseTicket" methodReturnMode="Object" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CloseTicket" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.CompleteCurrentUserTicketActivities" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CompleteCurrentUserTicketActivities" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.DoActivityCommentsExists" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.TicketActivity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="DoActivityCommentsExists" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.DoesTicketHaveAccount" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="DoesTicketHaveAccount" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.GetOpenTimedTicketActivity" methodReturnMode="Object" returnType="ITicketActivity">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="GetOpenTimedTicketActivity" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.GetPortalTicketActivities" methodReturnMode="Object" returnType="IList&lt;ITicketActivity&gt;">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="GetPortalTicketActivities" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.IsAutoPunchInEnabled" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="IsAutoPunchInEnabled" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.IsDisplayActivityOnPunchOut" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="IsDisplayActivityOnPunchOut" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.IsDisplayServiceInfoView" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="IsDisplayServiceInfoView" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.IsOtherUserPunchedIn" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="IsOtherUserPunchedIn" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.IsTicketClosedByNeededByDate" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="IsTicketClosedByNeededByDate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.IsTicketPunchedIn" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="IsTicketPunchedIn" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.IsTicketStatusClosed" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="IsTicketStatusClosed" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnAccountChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnAccountChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Ticket.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Ticket.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnAfterStatusCodeChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnAfterStatusCodeChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Ticket.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnBeforeAddKnowledgeChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeAddKnowledgeChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnBeforeAreaChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeAreaChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnBeforeCategoryChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeCategoryChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnBeforeCompletedByChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeCompletedByChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Ticket.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Ticket.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnBeforeIssueChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeIssueChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnBeforeReceivedByChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeReceivedByChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnBeforeStatusCodeChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeStatusCodeChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnBeforeSubmitSearchChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeSubmitSearchChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Ticket.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnBeforeUrgencyChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUrgencyChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnContactChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnContactChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Ticket.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.PunchInOut" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="PunchInOut" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.ReOpenTicket" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ReOpenTicket" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.ValidateAssignedContract" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ValidateAssignedContract" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Ticket.ValidateAssignToUser" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Ticket.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ValidateAssignToUser" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TargetResponse.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TargetResponse.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TargetResponse.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TargetResponse.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TargetResponse.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TargetResponse.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TargetResponse.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TargetResponse.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TargetResponse.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.TargetResponse.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TargetResponse.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TargetResponse.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.TargetResponse.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TargetResponse.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="TargetResponse.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.TargetResponse.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="TargetResponse.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.CanCompleteStage" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CanCompleteStage" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.CanCompleteStep" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CanCompleteStep" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.CanMoveToStage" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CanMoveToStage" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.CompleteStage" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CompleteStage" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.CompleteStep" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CompleteStep" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.DaysInStage" methodReturnMode="Object" returnType="System.Int32">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="DaysInStage" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.EstimatedCloseDate" methodReturnMode="Object" returnType="System.DateTime">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="EstimatedCloseDate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.EstimatedDaysToClose" methodReturnMode="Object" returnType="System.Double">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="EstimatedDaysToClose" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.GetSalesProcessAudits" methodReturnMode="Object" returnType="IList&lt;ISalesProcessAudit&gt;">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="GetSalesProcessAudits" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.InitSalesProcess" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="InitSalesProcess" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.NumberOfStepsCompleted" methodReturnMode="Object" returnType="System.Int32">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="NumberOfStepsCompleted" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesProcesses.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesProcesses.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesProcesses.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesProcesses.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesProcesses.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesProcesses.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesProcesses.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.ScheduleActivity" methodReturnMode="Object" returnType="object">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ScheduleActivity" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.ScheduleContactProcess" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ScheduleContactProcess" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.ScheduleLitRequest" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ScheduleLitRequest" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.SetToCurrentStage" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="SetToCurrentStage" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.StartStage" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="StartStage" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.StartStep" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="StartStep" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.UnCompleteStage" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UnCompleteStage" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcesses.UnCompleteStep" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.SalesProcess.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UnCompleteStep" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcessAudit.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesProcessAudit.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcessAudit.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesProcessAudit.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcessAudit.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesProcessAudit.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcessAudit.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesProcessAudit.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcessAudit.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesProcessAudit.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcessAudit.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesProcessAudit.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesProcessAudit.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesProcessAudit.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesOrderItems.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesOrderItems.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesOrderItems.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesOrderItems.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesOrderItems.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesOrderItems.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesOrderItems.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesOrderItems.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesOrderItems.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesOrderItems.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesOrderItems.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesOrderItems.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesOrderItems.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesOrderItems.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesOrderAddress.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesOrderAddress.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesOrderAddress.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesOrderAddress.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesOrderAddress.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesOrderAddress.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesOrderAddress.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesOrderAddress.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesOrderAddress.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesOrderAddress.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesOrderAddress.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesOrderAddress.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="SalesOrderAddress.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="SalesOrderAddress.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Salesorder.LoadSalesOrder" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Opportunity.OpportunityHelperClass, Sage.SalesLogix.BusinessRules" targetMethod="LoadSalesOrder" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Salesorder.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Salesorder.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Salesorder.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Salesorder.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Salesorder.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Salesorder.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Salesorder.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Salesorder.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Salesorder.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Salesorder.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Salesorder.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Salesorder.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Salesorder.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Salesorder.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnShippedProduct.AssociateExistingAccountProduct" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.ReturnShippedProduct.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AssociateExistingAccountProduct" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnShippedProduct.AssociateNewAccountProduct" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.ReturnShippedProduct.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AssociateNewAccountProduct" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnShippedProduct.GetProductName" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.BusinessRules.CodeSnippets.ReturnShippedProductBusinessRules, Sage.SnippetLibrary.CSharp" targetMethod="GetProductName" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnShippedProduct.GetProductSerialNumber" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.BusinessRules.CodeSnippets.ReturnShippedProductBusinessRules, Sage.SnippetLibrary.CSharp" targetMethod="GetProductSerialNumber" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnShippedProduct.GetProductSKU" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.BusinessRules.CodeSnippets.ReturnShippedProductBusinessRules, Sage.SnippetLibrary.CSharp" targetMethod="GetProductSKU" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnShippedProduct.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnShippedProduct.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnShippedProduct.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnShippedProduct.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnShippedProduct.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnShippedProduct.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnShippedProduct.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnShippedProduct.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnShippedProduct.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.ReturnShippedProduct.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnShippedProduct.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnShippedProduct.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.ReturnShippedProduct.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnShippedProduct.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnShippedProduct.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.ReturnShippedProduct.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnShippedProduct.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnReceivedProduct.GetProductName" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.BusinessRules.CodeSnippets.ReturnReceivedProductBusinessRules, Sage.SnippetLibrary.CSharp" targetMethod="GetProductName" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnReceivedProduct.GetProductSerialNumber" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.BusinessRules.CodeSnippets.ReturnReceivedProductBusinessRules, Sage.SnippetLibrary.CSharp" targetMethod="GetProductSerialNumber" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnReceivedProduct.GetProductSKU" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.BusinessRules.CodeSnippets.ReturnReceivedProductBusinessRules, Sage.SnippetLibrary.CSharp" targetMethod="GetProductSKU" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnReceivedProduct.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnReceivedProduct.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnReceivedProduct.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnReceivedProduct.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnReceivedProduct.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnReceivedProduct.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnReceivedProduct.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnReceivedProduct.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnReceivedProduct.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnReceivedProduct.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnReceivedProduct.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnReceivedProduct.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnReceivedProduct.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnReceivedProduct.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnAddress.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnAddress.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnAddress.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnAddress.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnAddress.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnAddress.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnAddress.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnAddress.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnAddress.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnAddress.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnAddress.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnAddress.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ReturnAddress.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ReturnAddress.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Return.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Return.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Return.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Return.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Return.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Return.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Return.OnAssociateTicket" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Return.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnAssociateTicket" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Return.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Return.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Return.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Return.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Return.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Return.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Return.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Return.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Return.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Return.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Return.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Return.OnSetCommentsDateTimeStamp" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Return.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnSetCommentsDateTimeStamp" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Return.OnSetReturnNotesDateTimeStamp" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Return.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnSetReturnNotesDateTimeStamp" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Return.OnSetShipContact" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Return.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnSetShipContact" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Return.OnSetShipNotesDateTimeStamp" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Return.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnSetShipNotesDateTimeStamp" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Return.OnSetStatus" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Return.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnSetStatus" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="QualificationCategory.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="QualificationCategory.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="QualificationCategory.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="QualificationCategory.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="QualificationCategory.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="QualificationCategory.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="QualificationCategory.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="QualificationCategory.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="QualificationCategory.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="QualificationCategory.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="QualificationCategory.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="QualificationCategory.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="QualificationCategory.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="QualificationCategory.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Qualification.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Qualification.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Qualification.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Qualification.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Qualification.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Qualification.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Qualification.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Qualification.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Qualification.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Qualification.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Qualification.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Qualification.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Qualification.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Qualification.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ProductProgram.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ProductProgram.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ProductProgram.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ProductProgram.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ProductProgram.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ProductProgram.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ProductProgram.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ProductProgram.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ProductProgram.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ProductProgram.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ProductProgram.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ProductProgram.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ProductProgram.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ProductProgram.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Product.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Product.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Product.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Product.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Product.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Product.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Product.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Product.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Product.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Product.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Product.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Product.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Product.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Product.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Process.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Process.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Process.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Process.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Process.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Process.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Process.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Process.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Process.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Process.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Process.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Process.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Process.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Process.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Process.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Process.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Process.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Process.UpdateStatus" methodReturnMode="Object" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Process.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UpdateStatus" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="PackageProduct.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="PackageProduct.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="PackageProduct.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="PackageProduct.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="PackageProduct.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="PackageProduct.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="PackageProduct.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="PackageProduct.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="PackageProduct.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="PackageProduct.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="PackageProduct.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="PackageProduct.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="PackageProduct.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="PackageProduct.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Package.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Package.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Package.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Package.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Package.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Package.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Package.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Package.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Package.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Package.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Package.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Package.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Package.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Package.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityProduct.CalcPriceFromProgramPrice" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Opportunity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CalcPriceFromProgramPrice" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityProduct.CalculateCalcPrice" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Opportunity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CalculateCalcPrice" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityProduct.CalculateDiscount" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Opportunity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CalculateDiscount" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityProduct.CalculateExtendedPrice" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Opportunity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CalculateExtendedPrice" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityProduct.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityProduct.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityProduct.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityProduct.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityProduct.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityProduct.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityProduct.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityProduct.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityProduct.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityProduct.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityProduct.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityProduct.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityProduct.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityProduct.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityContact.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityContact.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityContact.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityContact.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityContact.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityContact.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityContact.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityContact.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityContact.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityContact.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityContact.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityContact.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityContact.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityContact.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityCompetitor.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityCompetitor.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityCompetitor.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityCompetitor.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityCompetitor.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityCompetitor.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityCompetitor.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityCompetitor.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityCompetitor.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityCompetitor.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityCompetitor.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityCompetitor.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityCompetitor.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityCompetitor.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityCampaign.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityCampaign.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityCampaign.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityCampaign.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityCampaign.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityCampaign.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityCampaign.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityCampaign.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityCampaign.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityCampaign.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityCampaign.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityCampaign.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="OpportunityCampaign.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="OpportunityCampaign.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Opportunity.CheckOppAccount" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Opportunity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CheckOppAccount" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Opportunity.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Opportunity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Opportunity.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Opportunity.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Opportunity.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Opportunity.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Opportunity.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Opportunity.OnBeforeAccountChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Opportunity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeAccountChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Opportunity.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Opportunity.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Opportunity.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Opportunity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Opportunity.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Opportunity.OnBeforeStatusChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Opportunity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeStatusChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Opportunity.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Opportunity.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Opportunity.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Opportunity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Opportunity.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Opportunity.StatusChangeLost" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Opportunity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="StatusChangeLost" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Opportunity.StatusChangeWon" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Opportunity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="StatusChangeWon" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Opportunity.UpdateOppRecord" methodReturnMode="Object" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Opportunity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UpdateOppRecord" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceUserInfo.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceUserInfo.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceUserInfo.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceUserInfo.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceUserInfo.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceUserInfo.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceUserInfo.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceUserInfo.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceUserInfo.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceUserInfo.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceUserInfo.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceUserInfo.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceUserInfo.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceUserInfo.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceUndeliverable.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceUndeliverable.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceUndeliverable.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceUndeliverable.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceUndeliverable.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceUndeliverable.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceUndeliverable.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceUndeliverable.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceUndeliverable.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceUndeliverable.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceUndeliverable.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceUndeliverable.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceUndeliverable.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceUndeliverable.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceRecipient.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceRecipient.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceRecipient.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceRecipient.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceRecipient.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceRecipient.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceRecipient.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceRecipient.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceRecipient.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceRecipient.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceRecipient.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceRecipient.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceRecipient.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceRecipient.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceOpen.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceOpen.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceOpen.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceOpen.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceOpen.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceOpen.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceOpen.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceOpen.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceOpen.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceOpen.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceOpen.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceOpen.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceOpen.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceOpen.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceClick.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceClick.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceClick.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceClick.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceClick.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceClick.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceClick.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceClick.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceClick.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceClick.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceClick.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceClick.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceClick.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceClick.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceCampaign.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceCampaign.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceCampaign.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceCampaign.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceCampaign.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceCampaign.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceCampaign.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceCampaign.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceCampaign.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceCampaign.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceCampaign.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceCampaign.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="MarketingServiceCampaign.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="MarketingServiceCampaign.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LitRequest.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LitRequest.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LitRequest.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LitRequest.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LitRequest.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LitRequest.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LitRequest.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LitRequest.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LitRequest.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LitRequest.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LitRequest.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LitRequest.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LitRequest.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LitRequest.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LibraryDocs.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LibraryDocs.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LibraryDocs.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LibraryDocs.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LibraryDocs.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LibraryDocs.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LibraryDocs.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LibraryDocs.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LibraryDocs.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LibraryDocs.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LibraryDocs.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LibraryDocs.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LibraryDocs.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LibraryDocs.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LibraryDirs.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LibraryDirs.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LibraryDirs.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LibraryDirs.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LibraryDirs.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LibraryDirs.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LibraryDirs.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LibraryDirs.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LibraryDirs.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LibraryDirs.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LibraryDirs.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LibraryDirs.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LibraryDirs.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LibraryDirs.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadSource.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadSource.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadSource.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadSource.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadSource.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadSource.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadSource.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadSource.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadSource.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadSource.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadSource.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadSource.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadSource.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadSource.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadQualification.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadQualification.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadQualification.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadQualification.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadQualification.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadQualification.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadQualification.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadQualification.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadQualification.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadQualification.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadQualification.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadQualification.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadQualification.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadQualification.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadImportMap.GetImportTemplates" methodReturnMode="Object" returnType="IList&lt;ILeadImportMap&gt;">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.ImportRules, Sage.SalesLogix.BusinessRules" targetMethod="GetImportTemplates" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadImportMap.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadImportMap.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadImportMap.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadImportMap.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadImportMap.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadImportMap.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadImportMap.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadImportMap.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadImportMap.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadImportMap.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadImportMap.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadImportMap.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadImportMap.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadImportMap.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadHistory.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadHistory.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadHistory.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadHistory.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadHistory.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadHistory.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadHistory.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadHistory.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadHistory.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadHistory.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadHistory.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadHistory.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadHistory.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadHistory.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddressHistory.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadAddressHistory.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddressHistory.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadAddressHistory.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddressHistory.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadAddressHistory.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddressHistory.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadAddressHistory.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddressHistory.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadAddressHistory.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddressHistory.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadAddressHistory.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddressHistory.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadAddressHistory.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddress.FormatFullLeadAddress" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Address.Rules, Sage.SalesLogix.BusinessRules" targetMethod="FormatFullLeadAddress" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddress.GetFullAddress" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.BusinessRules.CodeSnippets.LeadAddressBusinessRules, Sage.SnippetLibrary.CSharp" targetMethod="GetFullAddressStep1" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddress.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadAddress.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddress.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadAddress.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddress.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadAddress.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddress.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadAddress.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddress.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadAddress.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddress.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadAddress.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="LeadAddress.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="LeadAddress.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.AddActivities" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddActivities" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.AddAttachmentsContactID" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddAttachmentsContactID" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.AddHistoryAndQualificationRecords" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddHistoryAndQualificationRecords" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.ChangeCampaignTargetEntityID" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ChangeCampaignTargetEntityID" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.ConvertLeadAddressToAccountAddress" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ConvertLeadAddressToAccountAddress" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.ConvertLeadAddressToContactAddress" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ConvertLeadAddressToContactAddress" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.ConvertLeadToAccount" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ConvertLeadToAccount" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.ConvertLeadToContact" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ConvertLeadToContact" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.IsCompanyNameAssigned" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="IsCompanyNameAssigned" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.MergeLeadWithAccount" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="MergeLeadWithAccount" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.MergeLeadWithContact" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="MergeLeadWithContact" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.MoveLeadAddressHistory" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="MoveLeadAddressHistory" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.MoveLeadToHistory" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="MoveLeadToHistory" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Lead.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Lead.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Lead.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.OnBeforeCompanyChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeCompanyChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Lead.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Lead.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.OnBeforeLastNameChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeLastNameChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Lead.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Lead.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.SaveLead" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="SaveLead" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.SaveLeadHistory" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="SaveLeadHistory" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Lead.ValidateLead" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Lead.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ValidateLead" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportTemplate.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ImportTemplate.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportTemplate.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ImportTemplate.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportTemplate.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ImportTemplate.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportTemplate.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ImportTemplate.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportTemplate.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ImportTemplate.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportTemplate.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ImportTemplate.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportTemplate.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ImportTemplate.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportHistory.AddHistoryItem" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.ImportHistory.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddHistoryItem" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportHistory.GetHistoryItems" methodReturnMode="Object" returnType="object">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.ImportHistory.Rules, Sage.SalesLogix.BusinessRules" targetMethod="GetHistoryItems" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportHistory.GetSourceRawData" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.ImportHistory.Rules, Sage.SalesLogix.BusinessRules" targetMethod="GetSourceRawData" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportHistory.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ImportHistory.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportHistory.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ImportHistory.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportHistory.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ImportHistory.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportHistory.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ImportHistory.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportHistory.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.ImportHistory.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ImportHistory.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportHistory.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.ImportHistory.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ImportHistory.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ImportHistory.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.ImportHistory.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ImportHistory.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ExchangeRate.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ExchangeRate.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ExchangeRate.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ExchangeRate.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ExchangeRate.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ExchangeRate.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ExchangeRate.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ExchangeRate.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ExchangeRate.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ExchangeRate.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ExchangeRate.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ExchangeRate.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ExchangeRate.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ExchangeRate.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectTicket.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectTicket.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectTicket.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectTicket.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectTicket.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectTicket.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectTicket.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectTicket.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectTicket.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectTicket.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectTicket.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectTicket.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectTicket.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectTicket.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectSolution.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectSolution.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectSolution.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectSolution.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectSolution.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectSolution.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectSolution.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectSolution.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectSolution.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectSolution.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectSolution.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectSolution.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectSolution.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectSolution.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectReturn.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectReturn.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectReturn.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectReturn.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectReturn.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectReturn.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectReturn.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectReturn.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectReturn.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectReturn.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectReturn.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectReturn.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectReturn.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectReturn.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectProduct.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectProduct.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectProduct.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectProduct.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectProduct.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectProduct.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectProduct.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectProduct.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectProduct.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectProduct.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectProduct.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectProduct.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectProduct.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectProduct.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectProblem.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectProblem.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectProblem.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectProblem.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectProblem.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectProblem.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectProblem.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectProblem.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectProblem.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectProblem.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectProblem.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectProblem.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectProblem.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectProblem.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectHistory.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectHistory.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectHistory.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectHistory.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectHistory.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectHistory.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectHistory.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectHistory.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectHistory.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectHistory.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectHistory.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectHistory.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectHistory.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectHistory.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityRate.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectActivityRate.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityRate.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectActivityRate.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityRate.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectActivityRate.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityRate.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectActivityRate.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityRate.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectActivityRate.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityRate.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectActivityRate.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityRate.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectActivityRate.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityItem.AddDefectActivityNotesTimeStamp" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.DefectActivity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddDefectActivityNotesTimeStamp" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityItem.DoDefectActivityCalculations" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.DefectActivity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="DoDefectActivityCalculations" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityItem.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectActivityItem.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityItem.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectActivityItem.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityItem.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectActivityItem.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityItem.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectActivityItem.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityItem.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectActivityItem.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityItem.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectActivityItem.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="DefectActivityItem.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.DefectActivity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="DefectActivityItem.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.AddDefectCommentsTimeStamp" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Defect.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddDefectCommentsTimeStamp" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.AddDefectDescriptionTimeStamp" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Defect.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddDefectDescriptionTimeStamp" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.AddDefectResolutionTimeStamp" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Defect.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddDefectResolutionTimeStamp" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.CopyDefect" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Defect.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CopyDefect" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Defect.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Defect.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Defect.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.OnAfterStatusCodeChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Defect.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnAfterStatusCodeChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Defect.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.OnAssignedToChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Defect.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnAssignedToChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.OnBeforeAddKnowledgeChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Defect.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeAddKnowledgeChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Defect.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Defect.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Defect.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.OnBeforeStatusCodeChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Defect.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeStatusCodeChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.OnBeforeSubmitSearchChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Defect.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeSubmitSearchChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Defect.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Defect.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Defect.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Defect.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContractItem.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContractItem.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContractItem.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContractItem.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContractItem.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContractItem.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContractItem.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContractItem.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContractItem.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContractItem.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContractItem.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContractItem.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContractItem.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContractItem.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContractIncident.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContractIncident.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContractIncident.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContractIncident.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContractIncident.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContractIncident.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContractIncident.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContractIncident.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContractIncident.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContractIncident.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContractIncident.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContractIncident.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContractIncident.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContractIncident.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.AddContractCommentsTimeStamp" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddContractCommentsTimeStamp" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.CopyContract" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CopyContract" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.GetDuplicateContracts" methodReturnMode="Object" returnType="IList&lt;IContract&gt;">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="GetDuplicateContracts" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.GetTicketActivities" methodReturnMode="Object" returnType="IList">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="GetTicketActivities" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.IsDuplicateContracts" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="IsDuplicateContracts" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnAccountChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnAccountChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Contract.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Contract.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Contract.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnAmountChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnAmountChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Contract.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Contract.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Contract.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnContactChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnContactChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnContractTypeChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnContractTypeChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Contract.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnDiscountChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnDiscountChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnEndingDateChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnEndingDateChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnFirstTicketChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnFirstTicketChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnListPriceChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnListPriceChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnQuantityChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnQuantityChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contract.OnStartDateChanged" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contract.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnStartDateChanged" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContactLeadSource.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContactLeadSource.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContactLeadSource.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContactLeadSource.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContactLeadSource.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContactLeadSource.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContactLeadSource.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContactLeadSource.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContactLeadSource.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContactLeadSource.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContactLeadSource.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContactLeadSource.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ContactLeadSource.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ContactLeadSource.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.GetMatchingAccounts" methodReturnMode="Object" returnType="object">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="GetMatchingAccounts" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.GetMatchingContacts" methodReturnMode="Object" returnType="object">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="GetMatchingContacts" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.HasAddressChanges" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="HasAddressChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.HasFaxChanges" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="HasFaxChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.HasPropagationChanges" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="HasPropagationChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.HasWebAddressChanges" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="HasWebAddressChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.HasWorkPhoneChanges" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="HasWorkPhoneChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.MoveContact" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="MoveContact" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Contact.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Contact.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Contact.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Contact.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Contact.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Contact.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Contact.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.SaveContactAccount" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="SaveContactAccount" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.SaveContactLeadSource" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="SaveContactLeadSource" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.SaveWebAccess" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="SaveWebAccess" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.ScheduleProcess" methodReturnMode="Object" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ScheduleProcess" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.UpdateAddressChanges" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UpdateAddressChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.UpdateFaxChanges" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UpdateFaxChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.UpdateWebAddressChanges" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UpdateWebAddressChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Contact.UpdateWorkPhoneChanges" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Contact.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UpdateWorkPhoneChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Competitor.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Competitor.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Competitor.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Competitor.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Competitor.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Competitor.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Competitor.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Competitor.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Competitor.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Competitor.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Competitor.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Competitor.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Competitor.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Competitor.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTask.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTask.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTask.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTask.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTask.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTask.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTask.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTask.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTask.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.CampaignTask.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTask.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTask.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.CampaignTask.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTask.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTask.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.CampaignTask.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTask.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTargetsView.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTargetsView.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTargetsView.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTargetsView.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTargetsView.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTargetsView.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTargetsView.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTargetsView.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTargetsView.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTargetsView.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTargetsView.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTargetsView.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTargetsView.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTargetsView.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTarget.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.CampaignTarget.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTarget.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTarget.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTarget.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTarget.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTarget.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTarget.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTarget.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTarget.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.CampaignTarget.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTarget.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTarget.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTarget.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignTarget.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.CampaignTarget.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignTarget.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignStage.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignStage.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignStage.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignStage.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignStage.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignStage.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignStage.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignStage.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignStage.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.CampaignStage.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignStage.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignStage.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.CampaignStage.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignStage.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignStage.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.CampaignStage.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignStage.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignProduct.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignProduct.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignProduct.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignProduct.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignProduct.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignProduct.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignProduct.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignProduct.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignProduct.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignProduct.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignProduct.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignProduct.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="CampaignProduct.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="CampaignProduct.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Campaign.CopyCampaign" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Campaign.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CopyCampaign" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Campaign.GetBudgetResults" methodReturnMode="Object" returnType="object">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Campaign.Rules, Sage.SalesLogix.BusinessRules" targetMethod="GetBudgetResults" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Campaign.LaunchCampaign" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Campaign.Rules, Sage.SalesLogix.BusinessRules" targetMethod="LaunchCampaign" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Campaign.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Campaign.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Campaign.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Campaign.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Campaign.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Campaign.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Campaign.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Campaign.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Campaign.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Campaign.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Campaign.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Campaign.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Campaign.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Campaign.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Campaign.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Campaign.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Attachment.InsertFileAttachment" methodReturnMode="Object" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Attachment.Rules, Sage.SalesLogix.BusinessRules" targetMethod="InsertFileAttachment" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Attachment.InsertURLAttachment" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Attachment.Rules, Sage.SalesLogix.BusinessRules" targetMethod="InsertURLAttachment" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Attachment.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Attachment.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Attachment.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Attachment.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Attachment.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Attachment.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Attachment.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Attachment.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Attachment.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Attachment.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Attachment.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Attachment.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Attachment.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Attachment.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Attachment.UpdateFileAttachment" methodReturnMode="Object" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Attachment.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UpdateFileAttachment" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Attachment.UpdateURLAttachment" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Attachment.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UpdateURLAttachment" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Association.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Association.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Association.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Association.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Association.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Association.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Association.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Association.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Association.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Association.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Association.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Association.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Association.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Association.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AreaCategoryIssue.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AreaCategoryIssue.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AreaCategoryIssue.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AreaCategoryIssue.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AreaCategoryIssue.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AreaCategoryIssue.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AreaCategoryIssue.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AreaCategoryIssue.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AreaCategoryIssue.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AreaCategoryIssue.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AreaCategoryIssue.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AreaCategoryIssue.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AreaCategoryIssue.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AreaCategoryIssue.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AdHocGroup.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AdHocGroup.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AdHocGroup.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AdHocGroup.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AdHocGroup.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnAfterUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AdHocGroup.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AdHocGroup.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AdHocGroup.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AdHocGroup.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AdHocGroup.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AdHocGroup.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AdHocGroup.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AdHocGroup.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.Platform.Orm.DefaultCRUDEventHandler, Sage.Platform" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AdHocGroup.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Address.FormatFullAddress" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Address.Rules, Sage.SalesLogix.BusinessRules" targetMethod="FormatFullAddress" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Address.GetFullAddress" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.BusinessRules.CodeSnippets.AddressBusinessRules, Sage.SnippetLibrary.CSharp" targetMethod="GetFullAddressStep1" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Address.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Address.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Address.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Address.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Address.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Address.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Address.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Address.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Address.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Address.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Address.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Address.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Address.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Address.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Address.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Address.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Address.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Address.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AccountSummary.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AccountSummary.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AccountSummary.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AccountSummary.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AccountSummary.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AccountSummary.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AccountSummary.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AccountSummary.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AccountSummary.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AccountSummary.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AccountSummary.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AccountSummary.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AccountSummary.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AccountSummary.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AccountProduct.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AccountProduct.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AccountProduct.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AccountProduct.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AccountProduct.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AccountProduct.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AccountProduct.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AccountProduct.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AccountProduct.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AccountProduct.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AccountProduct.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AccountProduct.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="AccountProduct.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="AccountProduct.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.CanChangeOwner" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="CanChangeOwner" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.ChangeAccountName" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ChangeAccountName" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.ChangeAccountOwner" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="ChangeAccountOwner" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.GetOpportunityStats" methodReturnMode="Object" returnType="object">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="GetOpportunityStats" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.GetSubTypePickListName" methodReturnMode="Object" returnType="System.String">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="GetSubTypePickListName" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.HasAccountManagerChanges" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="HasAccountManagerChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.HasAddressChanges" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="HasAddressChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.HasFaxChanges" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="HasFaxChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.HasMainPhoneChanges" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="HasMainPhoneChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.HasPropagationChanges" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="HasPropagationChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.HasWebAddressChanges" methodReturnMode="Object" returnType="System.Boolean">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="HasWebAddressChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets>
        <target targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnAfterDelete" />
      </preExecuteTargets>
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Account.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Account.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Account.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Account.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeInsert" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Account.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnBeforeUpdate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Account.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Account.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.UpdateAccountManagerChanges" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UpdateAccountManagerChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.UpdateAddressChanges" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UpdateAddressChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.UpdateFaxChanges" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UpdateFaxChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.UpdateMainPhoneChanges" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UpdateMainPhoneChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Account.UpdateWebAddressChanges" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Account.Rules, Sage.SalesLogix.BusinessRules" targetMethod="UpdateWebAddressChanges" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserNotification.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserNotification.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserNotification.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserNotification.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserNotification.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserNotification.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserNotification.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserNotification.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserNotification.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserNotification.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserNotification.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserNotification.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserNotification.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Activity.BusinessRules.UserNotificationRules, Sage.SalesLogix.Activity" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserNotification.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserCalendar.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserCalendar.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserCalendar.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserCalendar.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserCalendar.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserCalendar.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserCalendar.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserCalendar.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserCalendar.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserCalendar.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserCalendar.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserCalendar.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserCalendar.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Activity.BusinessRules.UserCalendarRules, Sage.SalesLogix.Activity" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserCalendar.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserActivity.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserActivity.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserActivity.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserActivity.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserActivity.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserActivity.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserActivity.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserActivity.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserActivity.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserActivity.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserActivity.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserActivity.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="UserActivity.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Activity.BusinessRules.UserActivityRules, Sage.SalesLogix.Activity" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="UserActivity.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ResourceSchedule.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ResourceSchedule.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ResourceSchedule.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ResourceSchedule.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ResourceSchedule.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ResourceSchedule.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ResourceSchedule.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ResourceSchedule.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ResourceSchedule.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ResourceSchedule.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ResourceSchedule.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ResourceSchedule.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ResourceSchedule.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Activity.BusinessRules.ResourceScheduleRules, Sage.SalesLogix.Activity" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ResourceSchedule.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ResourceList.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ResourceList.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ResourceList.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ResourceList.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ResourceList.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ResourceList.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ResourceList.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ResourceList.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ResourceList.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ResourceList.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ResourceList.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ResourceList.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="ResourceList.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Activity.BusinessRules.ResourceListRules, Sage.SalesLogix.Activity" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="ResourceList.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="History.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="History.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="History.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="History.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="History.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="History.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="History.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="History.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="History.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="History.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="History.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="History.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="History.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Activity.BusinessRules.HistoryRules, Sage.SalesLogix.Activity" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="History.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Event.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Event.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Event.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Event.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Event.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Event.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Event.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Event.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Event.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Event.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Event.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Event.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Event.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Activity.BusinessRules.EventRules, Sage.SalesLogix.Activity" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Event.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Activity.Complete" methodReturnMode="Object" returnType="IHistory">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Activity.Activity, Sage.SalesLogix.Activity" targetMethod="CompleteActivity" />
      <postExecuteTargets>
        <target targetType="Sage.SalesLogix.TicketActivity.Rules, Sage.SalesLogix.BusinessRules" targetMethod="AddTicketActivityFromCompletedActivity" />
      </postExecuteTargets>
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Activity.OnAfterDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Activity.OnAfterDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Activity.OnAfterInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Activity.OnAfterInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Activity.OnAfterUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Activity.OnAfterUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Activity.OnBeforeDelete" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Activity.BusinessRules.ActivityRules, Sage.SalesLogix.Activity" targetMethod="OnBeforeDelete" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Activity.OnBeforeDelete.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Activity.OnBeforeInsert" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Activity.OnBeforeInsert.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Activity.OnBeforeUpdate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Activity.OnBeforeUpdate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
    <dynamicMethod xsi:type="BusinessRuleMethod" methodName="Activity.OnCreate" methodReturnMode="None" returnType="System.Void">
      <preExecuteTargets />
      <primaryTarget targetType="Sage.SalesLogix.Activity.BusinessRules.ActivityRules, Sage.SalesLogix.Activity" targetMethod="OnCreate" />
      <postExecuteTargets />
    </dynamicMethod>
    <dynamicMethod xsi:type="SimpleMethod" methodName="Activity.OnCreate.postflush" methodReturnMode="None" returnType="System.Void">
      <targets />
    </dynamicMethod>
  </dynamicMethods>
</dynamicMethodConfiguration>