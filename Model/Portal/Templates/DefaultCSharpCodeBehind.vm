//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

#set ($baseType = $page.GetBasePageFullName())
#set ($portal = $page.Portal)
using System;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using Sage.Platform.Configuration;
using Sage.Platform.EntityBinding;
using Sage.Platform.Services;
using Sage.Platform.WebPortal;
using Sage.Platform.WebPortal.Services;
using Sage.Platform.WebPortal.SmartParts;
using Sage.Platform.WebPortal.UI;
using Sage.Platform.WebPortal.Workspaces;
using Sage.Platform.Application;
using Sage.Platform.Application.UI;
using Sage.Platform.Application.UI.Web;
using Sage.Platform.Orm;
using Sage.Platform.Orm.Entities;

namespace ${portal.PortalAlias}
{
	public partial class ${page.PageAlias}Page : $baseType
	{
	    static readonly log4net.ILog log = log4net.LogManager.GetLogger(
		    System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
		private const string LargeImageUrl = $tools.GetLargeImageUrl($page).to_quote;

		ScriptManager _scriptManager;
		
        #region Dependency Properties

        private IUIElementAdapterFactoryCatalog _adapterCatalog;
        /// <summary>
        /// Gets and sets a reference to the IUIElementAdapterFactoryCatalog
        /// </summary>
        [ServiceDependency]
        public IUIElementAdapterFactoryCatalog AdapterCatalog
        {
            get { return _adapterCatalog; }
            set 
            { 
                _adapterCatalog = value;
                _adapterCatalog.RegisterFactory(new NavItemCollectionUIAdapterFactory());
            }
        }
        #endregion
		
        #region Page Lifetime Overrides
        protected override void OnPreInit(EventArgs e)
        {
            try
            {
                LoadScriptManager();
                base.OnPreInit(e);
                Sage.Platform.Data.IDataService data = ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
                if(data != null)
                {
                    Sage.Platform.VirtualFileSystem.VFSQuery.ConfigureVFS(data.GetConnectionString(), data.Server);
                }
             
#if($page.PageProperties.Count > 0)
                //Apply Page Properties
                PropertyConfigurationCollection pageProperties = new PropertyConfigurationCollection();
#foreach( $prop in $page.PageProperties)
                pageProperties.Add($prop.PropertyName.to_quote, $tools.CleanString($prop.PropertyValue).to_quote, $prop.TypeConverter.to_quote);
#end
                pageProperties.ApplyProperties(this);
#end
#if($page.TemplateProperties.Count > 0)
                //Apply Template Properties
                PropertyConfigurationCollection templateProperties = new PropertyConfigurationCollection();
#foreach( $prop in $page.TemplateProperties)
                templateProperties.Add($prop.PropertyName.to_quote, $prop.PropertyValue.to_quote, $prop.TypeConverter.to_quote);
#end
                templateProperties.ApplyProperties(this.Master);
#end
            
                this.PageWorkItem.Services.AddNew<EntityFactoryContextService, IEntityContextService>();
                this.PageWorkItem.Services.Add<IWebDialogService>(new WebDialogService(this.PageWorkItem));
                this.PageWorkItem.Services.Add<IPageWorkItemLocator>(this.PageWorkItem);
			    this.PageWorkItem.Services.AddNew<WebEntityBindingManager, IEntityBindingManager>();
			    this.PageWorkItem.Services.AddNew<PanelRefreshService, IPanelRefreshService>();
            }
            catch(Exception ex)
            {
                HandleException(ex);
            }
        }
        protected override void OnLoad(EventArgs e)
        {
            try
            {
                base.OnLoad(e);
                SetTitleBar();
                MenuService mnuService = new MenuService();
                this.Page.Form.Controls.Add(mnuService);
                this.PageWorkItem.Services.Add<IMenuService>(mnuService);
                LoadLayout(this.Master);
                LoadNav();
                LoadMenu();
                LoadSmartParts();
                LoadModules();
                LoadTasklets();
            }
            catch(Exception ex)
            {
                HandleException(ex);
            }
        }
        protected override void OnPreRenderComplete(EventArgs e)
        {
            base.OnPreRenderComplete(e);
            HtmlContainerControl localTitle = this.Master.FindControl("localTitle") as HtmlContainerControl;
            if (localTitle == null) return;

            string img = !string.IsNullOrEmpty(this.TitleBar.Image) ?
                string.Format("<img src='{0}' />", ResolveUrl(this.TitleBar.Image)) : string.Empty;
            localTitle.InnerHtml = string.Format("<span id='PageTitle'>{0} {1}</span>", img, this.TitleBar.Text);
        }
        #endregion
		
        #region Helper Methods
        private void SetTitleBar()
        {
            string text = GetResource("PageTitle");
            this.Title = Resources.Portal.PortalTitle + " - " + text;

#if($baseType == "Sage.Platform.WebPortal.EntityPage")
            IEntityContextService entityContext = this.PageWorkItem.Services.Get<IEntityContextService>();
            if (entityContext.HasEntityContext)
            {
                switch (this.ViewMode)
                {
                    case EntityViewMode.Detail:
                        text = string.Format("{0} - {1}", Type.GetType(EntityTypeName).GetDisplayName(), entityContext.GetEntity());
                        break;
                    case EntityViewMode.List:
                        text  = Type.GetType(EntityTypeName).GetPluralDisplayName();
                        break;
                    default:
                        break;
                }
            }

#end
            if (string.IsNullOrEmpty(text))
                text = Resources.Portal.PortalTitle;

            this.TitleBar.Text = Server.HtmlEncode(text);
            this.TitleBar.Image = LargeImageUrl;
        }

        void LoadNav()
        {
            foreach (KeyValuePair<string, IWorkspace> wsPair in this.PageWorkItem.Workspaces)
            {
                if (wsPair.Value is Sage.Platform.WebPortal.Workspaces.NavWorkspace)
                {
#foreach($group in $portal.NavigationGroups)
                    NavItemCollection $group.ItemId = LoadControl($tools.ToAppRelative($group.ToRelativeUserControlPath()).to_quote).Controls[0] as NavItemCollection;
                    ${group.ItemId}.ID = $group.ItemId.to_quote;
#set($spInfoId = "${group.ItemId}Info")
                    WebSmartPartInfo $spInfoId = new WebSmartPartInfo(GetResource($tools.ToAppRelative($group.ToRelativeUserControlPath()).to_quote, "Text"),GetResource($tools.ToAppRelative($group.ToRelativeUserControlPath()).to_quote, "Description"))
						{SmallImagePath = $tools.ResolveImageUrl($group.SmallImageUrl).to_quote, LargeImagePath = $tools.ResolveImageUrl($group.LargeImageUrl).to_quote};
                    wsPair.Value.Show($group.ItemId, $spInfoId);
                    this.PageWorkItem.UIExtensionSites.RegisterSite($group.ItemId.to_quote, $group.ItemId);
                    
#end
                }
            }                
    
        }
        void LoadMenu()
        {
            foreach (KeyValuePair<string, IWorkspace> wsPair in this.PageWorkItem.Workspaces)
            {
                if (wsPair.Value is Sage.Platform.WebPortal.Workspaces.ToolbarWorkspace)
                {
#foreach($menu in $portal.MenuItems)
                    NavItemCollection $menu.ItemId = LoadControl($tools.ToAppRelative($menu.ToRelativeUserControlPath()).to_quote).Controls[0] as NavItemCollection;
                    ${menu.ItemId}.ID = $menu.ItemId.to_quote;
#set($spInfoId = "${menu.ItemId}Info")
                    WebToolbarSmartPartInfo $spInfoId = new WebToolbarSmartPartInfo(GetResource($tools.ToAppRelative($menu.ToRelativeUserControlPath()).to_quote, "Text"),GetResource($tools.ToAppRelative($menu.ToRelativeUserControlPath()).to_quote, "Description"))
						{ SmallImagePath = $tools.ResolveImageUrl($menu.SmallImageUrl).to_quote,LargeImagePath = $tools.ResolveImageUrl($menu.LargeImageUrl).to_quote};
                    wsPair.Value.Show($menu.ItemId, $spInfoId);

#end
                }
            }
        }
        void LoadSmartParts()
        {
#foreach ($sp in $page.SmartParts)
#if($sp.Properties.Count > 0)
		
			PropertyConfigurationCollection ${sp.SmartPartId}Properties = new PropertyConfigurationCollection();
#foreach( $prop in $sp.Properties)
			${sp.SmartPartId}Properties.Add($prop.PropertyName.to_quote, $prop.PropertyValue.to_quote, $prop.TypeConverter.to_quote);
#end
			RegisterSmartPart($sp.TargetWorkspace.to_quote, $sp.ShowInMode.to_quote,$sp.AllowRoles.to_quote,$tools.ToAppRelative($sp.RuntimeUrl).to_quote, $sp.SmartPartId.to_quote,GetResource("${sp.SmartPartId}.Title"),GetResource("${sp.SmartPartId}.Description"),${sp.SmartPartId}Properties);
		
#else 
			RegisterSmartPart($sp.TargetWorkspace.to_quote, $sp.ShowInMode.to_quote,$sp.AllowRoles.to_quote,$tools.ToAppRelative($sp.RuntimeUrl).to_quote, $sp.SmartPartId.to_quote,GetResource("${sp.SmartPartId}.Title"),GetResource("${sp.SmartPartId}.Description"),null);
#end
#end
        }
        
        string GetResource(string url, string key)
        {
            object obj = HttpContext.GetLocalResourceObject(url, key);
            if(obj != null)
                return obj.ToString();
            else
                return String.Empty;
        }
        string GetResource(string key)
        {
            return GetResource("~/${page.PageAlias}.aspx", key);
        }
        
        void LoadModules()
        {
#foreach ($mod in $page.GetAllModules())
#if($mod.Properties.Count > 0)
            if(IsModeMatch($mod.RunInMode.to_quote) && IsRoleMatch($mod.AllowRoles.to_quote))
            {
                var m = new $mod();
                var configs = new PropertyConfigurationCollection();
#foreach($prop in $mod.Properties)
                configs.Add($prop.PropertyName.to_quote, $prop.PropertyValue.to_quote, $prop.TypeConverter.to_quote);
#end
                configs.ApplyProperties(m);
                RegisterModule($mod.RunInMode.to_quote, $mod.AllowRoles.to_quote, m);
            }
#else
			RegisterModule<${mod}>($mod.RunInMode.to_quote, $mod.AllowRoles.to_quote);
#end
#end
        }
        void LoadTasklets()
        {
            foreach (KeyValuePair<string, IWorkspace> wsPair in PageWorkItem.Workspaces)
            {
                if (wsPair.Value is TaskPaneWorkspace)
                {
#if($portal.Tasklets.Count > 0)
					Control ctrl;
#foreach ($tasklet in $portal.Tasklets)
					ctrl = LoadControl($tools.ToAppRelative($tasklet.SmartPart).to_quote);
					ctrl.ID = $tasklet.SmartPartId.to_quote;
					wsPair.Value.Show(ctrl, new TaskPaneSmartPartInfo(
						(string) GetGlobalResourceObject("Tasklets", "${tasklet.SmartPartId}.Title"),
						(string) GetGlobalResourceObject("Tasklets", "${tasklet.SmartPartId}.Description"),
						ContextDisplayMode.${tasklet.DisplayMode},
						new string[] { #list($entity in $tasklet.Entities ',') $entity.to_quote #end },
						$tasklet.UseCustomRendering.ToString().ToLower()));
#end
#end
				}
			}
        }
        void LoadLayout(Control parentControl)
        {
            foreach (Control childControl in parentControl.Controls)
            {
                //Load Workspaces
                IWorkspace ws = childControl as IWorkspace;
                if (ws != null)
                {
                    this.PageWorkItem.Workspaces.Add(ws, childControl.ID);

                }

                //Load SmartParts
                if (Attribute.IsDefined(childControl.GetType(), typeof(SmartPartAttribute)))
                    this.PageWorkItem.SmartParts.Add(childControl);

                //Load UIExtensionSites
                if (CanBeExtensionSite(childControl))
                    this.PageWorkItem.UIExtensionSites.RegisterSite(childControl.ID, childControl);

                LoadLayout(childControl);
            }
        }
        bool CanBeExtensionSite(Control c)
        {
            foreach (IUIElementAdapterFactory factory in _adapterCatalog.Factories)
            {
                if (factory.Supports(c))
                    return true;
            }
            return false;
        }
        void LoadScriptManager()
        {
            HtmlForm form = FindForm();
            if (form != null)
            {
                _scriptManager = new ScriptManager();
                _scriptManager.ID = "portalScriptManager";
                _scriptManager.EnableScriptLocalization = true;
                _scriptManager.AsyncPostBackError += new EventHandler<AsyncPostBackErrorEventArgs>(_scriptManager_AsyncPostBackError);
                form.Controls.AddAt(0, _scriptManager);
            }
        }
        private HtmlForm FindFormRecursive (Control root)
        {
            HtmlForm form = root as HtmlForm;
            if (form == null)
            {
				foreach (Control c in root.Controls)
				{
					form = FindFormRecursive(c) as HtmlForm;
					if (form != null)
					{
						break;
					}
				}
            }
            return form;
        }
        HtmlForm FindForm()
        {
            foreach (Control c in this.Master.Controls)
            {
                HtmlForm form = FindFormRecursive(c);
                if (form != null)
                {
                    return (form);
                }
            }
            return null;
        }
        void _scriptManager_AsyncPostBackError(object sender, AsyncPostBackErrorEventArgs e)
        {
            log.Error("Unhandled exception occurred during async postback.", e.Exception);
        
			System.Text.StringBuilder sb = new System.Text.StringBuilder();
			sb.Append(e.Exception.Message);

			Exception innerEx = e.Exception.InnerException;
			int verbositycheck = 0;
			while (innerEx != null)
			{
				sb.Append(": <br />");
				sb.Append(innerEx.Message);

				if (innerEx is Sage.Platform.Application.ValidationException)
				{	
					_scriptManager.AsyncPostBackErrorMessage = innerEx.Message;
					return;
				}

				innerEx = innerEx.InnerException;
				if (verbositycheck++ > 3) { break; }
			}
			_scriptManager.AsyncPostBackErrorMessage = sb.ToString();
        }

        void InitMode()
        {
            if (HttpContext.Current != null && HttpContext.Current.Request != null)
            {
                this.PageWorkItem.State["ModeId"] = HttpContext.Current.Request["ModeId"];
            }
        }
         #endregion
    }
}
