<?xml version="1.0"?>
<codeTemplate xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="BAB54F5E-E03F-4eaf-8253-B05BDC80EF44" name="Default-SData-SalesLogix" entityType="Entity" templateType="sdata" templateEngineType="T4">
  <template><![CDATA[<#@ template language="C#v3.5" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="Microsoft.Unity.dll" #>
<#@ assembly name="Sage.Common.Syndication.dll" #>
<#@ assembly name="Sage.Platform.dll" #>
<#@ assembly name="Sage.Platform.Orm.CodeGen.dll" #>
<#@ assembly name="Sage.Platform.Projects.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.Practices.Unity" #>
<#@ import namespace="Sage.Common.Syndication" #>
<#@ import namespace="Sage.Platform.Orm.CodeGen" #>
<#@ import namespace="Sage.Platform.Orm.Entities" #>
<#
var entity = (OrmEntity) Context["entity"];
var generator = (SDataEntityCodeGenerator) Context["generator"];

var entityDisplayName = entity.DisplayName ?? entity.Name;
var entityDisplayNamePlural = entity.DisplayNamePlural ?? entity.PluralName;
#>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// disable XML documentation warnings
#pragma warning disable 1591

using System;
using System.ComponentModel;
using System.Xml;
using System.Xml.Serialization;
using Sage.Common.Metadata;
using Sage.Common.Metadata.Model;
using Sage.Common.Syndication;
using Sage.Entity.Interfaces;
using Sage.Integration.Entity.Feeds;
using Sage.Integration.Messaging.Model;
using Sage.Integration.Presentation.Model;
using Sage.Platform.SData.Dynamic;

#region Adapter Related Classes

namespace Sage.Integration.Entity.Adapter
{
    [RequestPath(ResourcePath)]
    public class <#= entity.Name #>Request : DynamicRequestBase<<#= entity.Name #>Feed, <#= entity.Name #>, <#= entity.InterfaceName #>>
    {
        public const string ResourcePath = "<#= entity.SDataPathName #>";

        public <#= entity.Name #>Request()
            : base(ResourcePath) {}

        internal <#= entity.Name #>Request(IRelatedRequest baseRequest, string associationPath, bool isForward)
            : base(ResourcePath, baseRequest, associationPath, isForward) {}

        [GetRequestTarget(Constants.SchemaTerm)]
        [Description("Retrieve a schema of the <#= entityDisplayName #> entity")]
        public void Get<#= entity.Name #>Schema(IRequest request)
        {
            DoGetSchema(request);
        }

        [GetRequestTarget(Constants.ServiceTerm)]
        [SupportedAccept(MediaType.Atom)]
        [Description("Retrieve a service for the <#= entityDisplayName #> entity")]
        public IFeed Get<#= entity.Name #>Service()
        {
            return DoGetService();
        }

        [GetRequestTarget(Constants.TemplateTerm)]
        [SupportedAccept(MediaType.AtomEntry)]
        [Description("Retrieve a template of the <#= entityDisplayName #> entity, with default values pre-populated")]
        public <#= entity.Name #> Get<#= entity.Name #>Template(IRequest request)
        {
            return DoGetTemplate(request);
        }

        [GetRequestTarget]
        [Description("Retrieve either a list of <#= entityDisplayNamePlural #> or a specific <#= entityDisplayName #>")]
        public void Get<#= entity.PluralName #>(IRequest request)
        {
            DoGet(request);
        }

        [PostRequestTarget]
        [SupportedContentType(MediaType.AtomEntry)]
        [SupportedAccept(MediaType.AtomEntry)]
        [Description("Create a new <#= entityDisplayName #>")]
        public <#= entity.Name #> Post<#= entity.Name #>(<#= entity.Name #> entry)
        {
            return DoPost(entry);
        }

        [PutRequestTarget]
        [SupportedContentType(MediaType.AtomEntry)]
        [SupportedAccept(MediaType.AtomEntry)]
        [Description("Update the details of a specific <#= entityDisplayName #>")]
        public <#= entity.Name #> Put<#= entity.Name #>(IRequest request, <#= entity.Name #> entry)
        {
            return DoPut(request, entry);
        }

        [DeleteRequestTarget]
        [SupportedAccept(MediaType.AtomEntry)]
        [Description("Delete the specified <#= entityDisplayName #>")]
        public <#= entity.Name #> Delete<#= entity.Name #>(IRequest request)
        {
            return DoDelete(request);
        }

        [PostRequestTarget(Constants.BatchTerm)]
        [SupportedContentType(MediaType.Atom)]
        [SupportedAccept(MediaType.Atom)]
        [Description("Batch update a collection of <#= entityDisplayNamePlural #>")]
        public <#= entity.Name #>Feed Post<#= entity.Name #>Batch(<#= entity.Name #>Feed feed)
        {
            return DoPostBatch(feed);
        }

<# if (entity.ParentEntities.Count > 0) { #>
        #region M:1 Relationships
<#  foreach (var relation in entity.ParentEntities) { #>
<#   var prop = relation.ChildProperty; #>
<#   var otherEntity = relation.ParentEntity; #>
<#   if (prop.Include && otherEntity.GenerateSDataFeed) { #>
<#    var propName = prop.PropertyName; #>
<#    var entityName = otherEntity.Name; #>
<#    var isForward = !(relation.ParentProperty.Include && relation.Cardinality == "1:M"); #>
<#    var associationPath = (isForward ? propName : relation.ParentProperty.PropertyName); #>
<#    RequestReferenceMethods(propName, generator.ToCamelCase(propName), entityName, associationPath, isForward); #>
<#   } #>
<#  } #>
        #endregion
<# } #>

<# if (entity.ChildEntities.Count > 0) { #>
        #region 1:M Relationships
<#  foreach (var relation in entity.ChildEntities) { #>
<#   var prop = relation.ParentProperty; #>
<#   var otherEntity = relation.ChildEntity; #>
<#   if (prop.Include && otherEntity.GenerateSDataFeed) { #>
<#    var propName = prop.PropertyName; #>
<#    var entityName = otherEntity.Name; #>
<#    var isForward = !(relation.ChildProperty.Include && relation.Cardinality == "1:M"); #>
<#    var associationPath = (isForward ? propName : relation.ChildProperty.PropertyName); #>
<#    if (relation.Cardinality == "1:M") { #>
        private <#= entityName #>Request _<#= propName #>Request;
        private <#= entityName #>Request <#= propName #>Request
        {
            get { return _<#= propName #>Request ?? (_<#= propName #>Request = new <#= entityName #>Request(this, "<#= associationPath #>", <#= isForward.ToString().ToLower() #>)); }
        }

        [GetRequestTarget("<#= generator.ToCamelCase(propName) #>/" + Constants.TemplateTerm)]
        [SupportedAccept(MediaType.AtomEntry)]
        public <#= entityName #> Get<#= propName #>Template(IRequest request)
        {
            return <#= propName #>Request.DoGetTemplate(request);
        }

        [GetRequestTarget("<#= generator.ToCamelCase(propName) #>")]
        public void Get<#= propName #>(IRequest request)
        {
            <#= propName #>Request.DoGetChildren(request);
        }

        [PostRequestTarget("<#= generator.ToCamelCase(propName) #>")]
        [SupportedContentType(MediaType.AtomEntry)]
        [SupportedAccept(MediaType.AtomEntry)]
        public <#= entityName #> Post<#= propName #>(<#= entityName #> entry)
        {
            return <#= propName #>Request.DoPostChild(entry);
        }

        [PutRequestTarget("<#= generator.ToCamelCase(propName) #>")]
        [SupportedContentType(MediaType.AtomEntry)]
        [SupportedAccept(MediaType.AtomEntry)]
        public <#= entityName #> Put<#= propName #>(IRequest request, <#= entityName #> entry)
        {
            return <#= propName #>Request.DoPutChild(request, entry);
        }

        [DeleteRequestTarget("<#= generator.ToCamelCase(propName) #>")]
        [SupportedAccept(MediaType.AtomEntry)]
        public <#= entityName #> Delete<#= propName #>(IRequest request)
        {
            return <#= propName #>Request.DoDeleteChild(request);
        }
<#    } else { #>
<#     RequestReferenceMethods(propName, generator.ToCamelCase(propName), entityName, associationPath, isForward); #>
<#    } #>
<#   } #>
<#  } #>
        #endregion
<# } #>

<# if (entity.IsExtension) { #>
<#  var parent = entity.ExtendedEntity; #>
<#  if (parent.GenerateSDataFeed) { #>
        #region 1:1 Parent Entity Extension
<#   var propName = parent.Name; #>
<#   var associationPath = entity.Name; #>
<#   RequestReferenceMethods(propName, generator.ToCamelCase(propName), propName, associationPath, false); #>
        #endregion
<#  } #>
<# } #>

<# if (entity.ExtensionEntities.Count > 0) { #>
        #region Child Extensions
<#  foreach (var child in entity.ExtensionEntities) { #>
<#   if (child.GenerateSDataFeed) { #>
<#    var propName = child.Name; #>
<#    var associationPath = entity.Name; #>
<#    RequestReferenceMethods(propName, generator.ToCamelCase(propName), propName, associationPath, false); #>
<#   } #>
<#  } #>
        #endregion
<# } #>

        #region Abstract Overrides

        protected override string[] KeyNames
        {
            get
            {
                return new[]
                           {
<# if (entity.HasCompositeKey) { #>
<#  if (entity.HasCompleteCompositeKeyRelationships) { #>
<#   foreach (var relation in entity.CompositeKeyRelationships) { #>
                               "<#= relation.Columns[0].ChildProperty.PropertyName #>",
<#   } #>
<#  } else { #>
<#   foreach (var key in entity.KeyProperties) { #>
                               "<#= key.Reference.PropertyName #>",
<#   } #>
<#  } #>
<# } else { #>
                               "Id"
<# } #>
                           };
            }
        }

        protected override void BuildTemplateEntity(<#= entity.InterfaceName #> entity, InclusionNode include)
        {
<# if (entity.ParentEntities.Count > 0) { #>
            #region M:1 Relationships
<#  foreach (var relation in entity.ParentEntities) { #>
<#   var prop = relation.ChildProperty; #>
<#   var otherEntity = relation.ParentEntity; #>
<#   if (prop.Include && otherEntity.GenerateSDataFeed) { #>
<#    var name = prop.PropertyName; #>
<#    var precedence = (int) prop.DisplayCategory; #>
<#    RequestBuildTemplateEntity(name, false, precedence); #>
<#   } #>
<#  } #>
            #endregion
<# } #>

<# if (entity.ChildEntities.Count > 0) { #>
            #region 1:M Relationships
<#  foreach (var relation in entity.ChildEntities) { #>
<#   var prop = relation.ParentProperty; #>
<#   var otherEntity = relation.ChildEntity; #>
<#   if (prop.Include && otherEntity.GenerateSDataFeed) { #>
<#    var name = prop.PropertyName; #>
<#    var isCollection = (relation.Cardinality == "1:M"); #>
<#    var precedence = (int) prop.DisplayCategory; #>
<#    RequestBuildTemplateEntity(name, isCollection, precedence); #>
<#   } #>
<#  } #>
            #endregion
<# } #>

<# if (entity.IsExtension) { #>
<#  var parent = entity.ExtendedEntity; #>
<#  if (parent.GenerateSDataFeed) { #>
            #region 1:1 Parent Entity Extension
<#   var name = parent.Name; #>
<#   RequestBuildTemplateEntity(name, false, 3); #>
            #endregion
<#  } #>
<# } #>

<# if (entity.ExtensionEntities.Count > 0) { #>
            #region Child Extensions
<#  foreach (var child in entity.ExtensionEntities) { #>
<#   if (child.GenerateSDataFeed) { #>
<#    var name = child.Name; #>
<#    RequestBuildTemplateEntity(name, false, 3); #>
<#   } #>
<#  } #>
            #endregion
<# } #>
        }

        protected override void CopyFeedEntryToEntity(<#= entity.Name #> entry, <#= entity.InterfaceName #> entity, InclusionNode include)
        {
            #region Properties
<# foreach (var prop in generator.GetIncludedProperties(entity, true)) { #>
<#  if (!(prop is OrmFieldProperty && ((OrmFieldProperty) prop).IsReadOnly)) { #>
<#   var name = prop.PropertyName; #>
            if (entry.IsPropertyChanged("<#= name #>"))
            {
                entity.<#= name #> = entry.<#= name #>;
            }
<#  } #>
<# } #>
            #endregion

<# if (entity.ParentEntities.Count > 0) { #>
            #region M:1 Relationships
<#  foreach (var relation in entity.ParentEntities) { #>
<#   var prop = relation.ChildProperty; #>
<#   var otherEntity = relation.ParentEntity; #>
<#   if (prop.Include && otherEntity.GenerateSDataFeed) { #>
<#    var name = prop.PropertyName; #>
<#    var otherName = (relation.ParentProperty.Include ? relation.ParentProperty.PropertyName : null); #>
<#    var isCollection = (relation.Cardinality == "1:M"); #>
<#    RequestReferenceCopyFeedEntryToEntity(name, otherName, isCollection); #>
<#   } #>
<#  } #>
            #endregion
<# } #>

<# if (entity.ChildEntities.Count > 0) { #>
            #region 1:M Relationships
<#  foreach (var relation in entity.ChildEntities) { #>
<#   var prop = relation.ParentProperty; #>
<#   var otherEntity = relation.ChildEntity; #>
<#   if (prop.Include && otherEntity.GenerateSDataFeed) { #>
<#    var name = prop.PropertyName; #>
<#    if (relation.Cardinality == "1:M") { #>
            if (entry.IsPropertyChanged("<#= name #>"))
            {
                var <#= name #>Include = new InclusionNode(InclusionNode.InclusionLevel.Include);
                include.AddChild("<#= name #>", <#= name #>Include);
                <#= name #>Request.CopyFeedEntryChildrenToEntity(entity.<#= name #>, entry.<#= name #>, <#= name #>Include);
<#     if (relation.ChildProperty.Include) { #>
                foreach (var child in entity.<#= name #>)
                {
                    child.<#= relation.ChildProperty.PropertyName #> = entity;
                }
<#     } #>
            }
<#    } else { #>
<#     var otherName = (relation.ChildProperty.Include ? relation.ChildProperty.PropertyName : null); #>
<#     RequestReferenceCopyFeedEntryToEntity(name, otherName, false); #>
<#    } #>
<#   } #>
<#  } #>
            #endregion
<# } #>

<# if (entity.IsExtension) { #>
<#  var parent = entity.ExtendedEntity; #>
<#  if (parent.GenerateSDataFeed) { #>
            #region 1:1 Parent Entity Extension
<#   var name = parent.Name; #>
<#   var otherName = entity.Name; #>
<#   RequestReferenceCopyFeedEntryToEntity(name, otherName, false); #>
            #endregion
<#  } #>
<# } #>

<# if (entity.ExtensionEntities.Count > 0) { #>
            #region Child Extensions
<#  foreach (var child in entity.ExtensionEntities) { #>
<#   if (child.GenerateSDataFeed) { #>
<#    var name = child.Name; #>
<#    var otherName = entity.Name; #>
<#    RequestReferenceCopyFeedEntryToEntity(name, otherName, false); #>
<#   } #>
<#  } #>
            #endregion
<# } #>
        }

        protected override void CopyEntityToFeedEntry(<#= entity.InterfaceName #> entity, <#= entity.Name #> entry, InclusionNode include)
        {
            #region Properties
<# foreach (var prop in generator.GetIncludedProperties(entity, true)) { #>
<#  var name = prop.PropertyName; #>
<#  var precedence = (int) prop.DisplayCategory; #>
            var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
            if (IsChildIncluded(include, <#= name #>Include, <#= precedence #>, true))
            {
                entry.<#= name #> = entity.<#= name #>;
            }
<# } #>
            #endregion

<# if (entity.ParentEntities.Count > 0) { #>
            #region M:1 Relationships
<#  foreach (var relation in entity.ParentEntities) { #>
<#   var prop = relation.ChildProperty; #>
<#   var otherEntity = relation.ParentEntity; #>
<#   if (prop.Include && otherEntity.GenerateSDataFeed) { #>
<#    var name = prop.PropertyName; #>
<#    var precedence = (int) prop.DisplayCategory; #>
<#    RequestReferenceCopyEntityToFeedEntry(name, precedence); #>
<#   } #>
<#  } #>
            #endregion
<# } #>

<# if (entity.ChildEntities.Count > 0) { #>
            #region 1:M Relationships
<#  foreach (var relation in entity.ChildEntities) { #>
<#   var prop = relation.ParentProperty; #>
<#   var otherEntity = relation.ChildEntity; #>
<#   if (prop.Include && otherEntity.GenerateSDataFeed) { #>
<#    var name = prop.PropertyName; #>
<#    var precedence = (int) prop.DisplayCategory; #>
<#    if (relation.Cardinality == "1:M") { #>
            var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
            if (IsChildIncluded(include, <#= name #>Include, <#= precedence #>, false))
            {
                entry.<#= name #> = new FeedEntryCollection<<#= otherEntity.Name #>>();
                <#= name #>Request.CopyEntityChildrenToFeedEntry(entry.<#= name #>, entity.<#= name #>, <#= name #>Include);
            }
<#    } else { #>
<#     RequestReferenceCopyEntityToFeedEntry(name, precedence); #>
<#    } #>
<#   } #>
<#  } #>
            #endregion
<# } #>

<# if (entity.IsExtension) { #>
<#  var parent = entity.ExtendedEntity; #>
<#  if (parent.GenerateSDataFeed) { #>
            #region 1:1 Parent Entity Extension
<#   var name = parent.Name; #>
<#   RequestReferenceCopyEntityToFeedEntry(name, 3); #>
            #endregion
<#  } #>
<# } #>

<# if (entity.ExtensionEntities.Count > 0) { #>
            #region Child Extensions
<#  foreach (var child in entity.ExtensionEntities) { #>
<#   if (child.GenerateSDataFeed) { #>
<#    var name = child.Name; #>
<#    RequestReferenceCopyEntityToFeedEntry(name, 3); #>
<#   } #>
<#  } #>
            #endregion
<# } #>
        }

        protected override void ConvertKey(ref string name, ref object value)
        {
<# if (entity.HasCompositeKey) { #>
<#  if (entity.HasCompleteCompositeKeyRelationships) { #>
<#   foreach (var relation in entity.CompositeKeyRelationships) { #>
<#    var prop = relation.Columns[0].ChildProperty; #>
            if (string.Equals(name, "<#= prop.PropertyName #>", StringComparison.InvariantCultureIgnoreCase))
            {
                name = "<#= relation.ChildProperty.PropertyName #>.Id";
                value = Convert.ChangeType(value, typeof (<#= generator.ToClrType(prop) #>));
            }
<#   } #>
<#  } else { #>
<#   foreach (var key in entity.KeyProperties) { #>
            if (string.Equals(name, "<#= key.Reference.PropertyName #>", StringComparison.InvariantCultureIgnoreCase))
            {
                name = "<#= key.Reference.PropertyName #>";
                value = Convert.ChangeType(value, typeof (<#= generator.ToClrType(key.Reference) #>));
            }
<#   } #>
<#  } #>
<# } else { #>
            name = "Id";
            value = Convert.ChangeType(value, typeof (<#= generator.ToClrType(entity.KeyProperty) #>));
<# } #>
        }

        protected override DateTime? GetEntityUpdatedDate(<#= entity.InterfaceName #> entity)
        {
<# if (entity.Properties["ModifiedDate"] != null && entity.Properties["ModifiedDate"].Include) { #>
            return entity.ModifiedDate;
<# } else if (entity.Properties["ModifyDate"] != null && entity.Properties["ModifyDate"].Include) { #>
            return entity.ModifyDate;
<# } else { #>
            return null;
<# } #>
        }

        #endregion
    }
}

#endregion

#region Feed Related Classes

namespace Sage.Integration.Entity.Feeds
{
    #region Feed Class

    public class <#= entity.Name #>Feed : Feed<<#= entity.Name #>>
    {
        public const string DefaultTitle = "Sage SalesLogix | <#= entityDisplayNamePlural #>";

        public <#= entity.Name #>Feed()
        {
            Title = DefaultTitle;
            SubTitle = "Provides a feed containing <#= entityDisplayName #> details";
            Version = "1.0";
            Generator.Version = Constants.FeedGeneratorVersion;
            Generator.Name = Constants.FeedGenerator;
            Author = new FeedAuthor {Name = "slx"};
        }
    }

    #endregion

    #region Feed Entity

    [PresentationSchema("<#= entity.Name #>Overview", PresentationSchemaType.Content)]
    [PresentationSchema("<#= entity.Name #>Detailed", PresentationSchemaType.Alternate)]
    [ResourceManager(typeof (Resources))]
    [XmlType("<#= entity.Name #>", Namespace = Constants.XmlNamespace)]
    [SMEResource(Label = "<#= entityDisplayName #>", PluralName = "<#= entity.PluralName #>", Path = "<#= entity.SDataPathName #>",
                 CanGet = true, CanPost = true, CanPut = true, CanDelete = true,
                 CanPagePrevious = true, CanPageNext = true, CanPageIndex = true,
                 BatchingMode = SyncModesType.Sync, SupportsETag = true)]
    public class <#= entity.Name #> : FeedEntry
    {
        private static readonly XmlSerializerNamespaces _serializerNamespaces = new XmlSerializerNamespaces(new[] {new XmlQualifiedName("slx", Constants.XmlNamespace)});

        [XmlNamespaceDeclarations]
        [XmlIgnore]
        private static XmlSerializerNamespaces SerializerNamespaces
        {
            get { return _serializerNamespaces; }
        }

        public <#= entity.Name #>()
        {
            Author = new FeedAuthor {Name = "slx"};
        }

        #region Properties
<# foreach (var prop in generator.GetIncludedProperties(entity, true)) { #>
<#  var type = generator.ToClrType(prop); #>
<#  var name = prop.PropertyName; #>
<#  var readOnly = prop is OrmFieldProperty && ((OrmFieldProperty) prop).IsReadOnly; #>
<#  FeedEntryProperty(type, name, readOnly, generator.GetPropertySMEMetadataAttribute(prop)); #>
<# } #>
        #endregion

<# if (entity.ParentEntities.Count > 0) { #>
        #region M:1 Relationships
<#  foreach (var relation in entity.ParentEntities) { #>
<#   var prop = relation.ChildProperty; #>
<#   var otherEntity = relation.ParentEntity; #>
<#   if (prop.Include && otherEntity.GenerateSDataFeed) { #>
<#    var type = otherEntity.Name; #>
<#    var name = prop.PropertyName; #>
<#    FeedEntryProperty(type, name, false, generator.GetPropertySMEMetadataAttribute(prop)); #>
<#   } #>
<#  } #>
        #endregion
<# } #>

<# if (entity.ChildEntities.Count > 0) { #>
        #region 1:M Relationships
<#  foreach (var relation in entity.ChildEntities) { #>
<#   var prop = relation.ParentProperty; #>
<#   var otherEntity = relation.ChildEntity; #>
<#   if (prop.Include && otherEntity.GenerateSDataFeed) { #>
<#    var name = prop.PropertyName; #>
<#    var type = (relation.Cardinality == "1:M" ? "FeedEntryCollection<" + otherEntity.Name + ">" : otherEntity.Name); #>
<#    FeedEntryProperty(type, name, false, generator.GetPropertySMEMetadataAttribute(prop)); #>
<#   } #>
<#  } #>
        #endregion
<# } #>

<# if (entity.IsExtension) { #>
<#  var parent = entity.ExtendedEntity; #>
<#  if (parent.GenerateSDataFeed) { #>
        #region 1:1 Parent Entity Extension
<#   var name = parent.Name; #>
<#   FeedEntryProperty(name, name, false, generator.GetPropertySMEMetadataAttribute(parent)); #>
        #endregion
<#  } #>
<# } #>

<# if (entity.ExtensionEntities.Count > 0) { #>
        #region Child Extensions
<#  foreach (var child in entity.ExtensionEntities) { #>
<#   if (child.GenerateSDataFeed) { #>
<#    var name = child.Name; #>
<#    FeedEntryProperty(name, name, false, generator.GetPropertySMEMetadataAttribute(child)); #>
<#   } #>
<#  } #>
        #endregion
<# } #>
    }

    #endregion
}

#endregion

<#+
[Dependency]
public IDictionary Context { get; set; }
#>
<#+ private void RequestReferenceMethods(string propName, string propNameCamel, string entityName, string associationPath, bool isForward) { #>
        private <#= entityName #>Request _<#= propName #>Request;
        private <#= entityName #>Request <#= propName #>Request
        {
            get { return _<#= propName #>Request ?? (_<#= propName #>Request = new <#= entityName #>Request(this, "<#= associationPath #>", <#= isForward.ToString().ToLower() #>)); }
        }

        [GetRequestTarget("<#= propNameCamel #>/" + Constants.TemplateTerm)]
        [SupportedAccept(MediaType.AtomEntry)]
        public <#= entityName #> Get<#= propName #>Template(IRequest request)
        {
            return <#= propName #>Request.DoGetTemplate(request);
        }

        [GetRequestTarget("<#= propNameCamel #>")]
        [SupportedAccept(MediaType.AtomEntry)]
        public void Get<#= propName #>(IRequest request)
        {
            <#= propName #>Request.DoGetParent(request);
        }
<#+ } #>
<#+ private void RequestBuildTemplateEntity(string name, bool isCollection, int precedence) { #>
            var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
            if (IsChildIncluded(include, <#= name #>Include, <#= precedence #>, false))
            {
<#+  if (isCollection) { #>
                entity.<#= name #>.Add(<#= name #>Request.DoBuildTemplateEntity(<#= name #>Include));
<#+  } else { #>
                entity.<#= name #> = <#= name #>Request.DoBuildTemplateEntity(<#= name #>Include);
<#+  } #>
            }
<#+ } #>
<#+ private void RequestReferenceCopyFeedEntryToEntity(string name, string otherName, bool isCollection) { #>
            if (entry.IsPropertyChanged("<#= name #>"))
            {
                var <#= name #>Include = new InclusionNode(InclusionNode.InclusionLevel.Include);
                include.AddChild("<#= name #>", <#= name #>Include);
                var parent = <#= name #>Request.CopyFeedEntryParentToEntity(entity.<#= name #>, entry.<#= name #>, <#= name #>Include);
                entity.<#= name #> = parent;
<#+  if (otherName != null) { #>
                if (parent != null)
                {
<#+   if (isCollection) { #>
                    parent.<#= otherName #>.Add(entity);
<#+   } else { #>
                    parent.<#= otherName #> = entity;
<#+   } #>
                }
<#+  } #>
            }
<#+ } #>
<#+ private void RequestReferenceCopyEntityToFeedEntry(string name, int precedence) { #>
            var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
            if (IsChildIncluded(include, <#= name #>Include, <#= precedence #>, false))
            {
                entry.<#= name #> = <#= name #>Request.CopyEntityParentToFeedEntry(entry.<#= name #>, entity.<#= name #>, <#= name #>Include);
            }
            else
            {
                entry.<#= name #> = <#= name #>Request.CreateLinkEntry(entity.<#= name #>);
            }
<#+ } #>
<#+ private void RequestLink(string entityName, string name, string nameCamel, string displayName, OrmEntity otherEntity, bool isEntry) { #>
            var <#= name #>Uri = new SDataUri(entry.Id);
            var <#= name #>LookupUri = new SDataUri(entry.Id)
                                {
                                    CollectionType = "<#= otherEntity.SDataPathName #>",
                                    CollectionPredicate = null
                                };
            <#= name #>Uri.AppendPath("<#= nameCamel #>");
            <#= name #>Uri[SDataUri.QueryArgNames.Format] = null;
            entry.Links.Add(new SDataFeedLink(
                                <#= name #>Uri.ToString(),
                                LinkType.Related,
                                MediaType.Atom<#= isEntry ? "Entry" : "" #>,
                                "<#= displayName ?? name #>")
                                {
                                    PayloadPath = "<#= entityName #>/<#= name #>",
                                    Lookup = <#= name #>LookupUri.ToString()
                                });
<#+ } #>
<#+ private void FeedEntryProperty(string type, string name, bool readOnly, string smeAttribute) { #>
        <#= type #> _<#= name #>;
        [<#= smeAttribute #>]
        public <#= typeof (FeedEntry).GetProperty(name) != null ? "new " : "" #><#= type #> <#= name #>
        {
            get { return _<#= name #>; }
            <#= readOnly ? "internal" : "" #> set { SetProperty("<#= name #>", ref _<#= name #>, value); }
        }
<#+ } #>]]></template>
  <description>Default SalesLogix SData template</description>
</codeTemplate>