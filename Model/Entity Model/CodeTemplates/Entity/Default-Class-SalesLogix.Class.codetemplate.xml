<?xml version="1.0"?>
<codeTemplate xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="4040a9aa-f9bf-4204-83d8-d5eb4da3e475" name="Default-Class-SalesLogix" templateType="Class" templateEngineType="T4">
  <template>
  <![CDATA[<#@ template language="C#v3.5" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="Microsoft.Unity.dll" #>
<#@ assembly name="Sage.Platform.dll" #>
<#@ assembly name="Sage.Platform.Orm.CodeGen.dll" #>
<#@ assembly name="Sage.Platform.Projects.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.Practices.Unity" #>
<#@ import namespace="Sage.Platform.Orm.CodeGen" #>
<#@ import namespace="Sage.Platform.Orm.Entities" #>
<#@ import namespace="Sage.Platform.Security" #>
<#
var tools = (Tools) Context["tools"];
var entity = (OrmEntity) Context["entity"];
var @namespace = (string) Context["namespace"];
var securityService = (IFieldLevelSecurityService) Context["securityService"];
var generator = (EntityCodeGenerator) Context["generator"];
#>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// disable XML documentation warnings and _Id never being assigned to
#pragma warning disable 1591, 649

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Reflection;
using NHibernate;
using NHibernate.Classic;
using Iesi.Collections;
using Iesi.Collections.Generic;
using Sage.Entity.Interfaces;
using Sage.Platform;
using Sage.Platform.Collections;
using Sage.Platform.ComponentModel;
using Sage.Platform.DynamicMethod;
using Sage.Platform.Framework;
using Sage.Platform.Metadata;
using Sage.Platform.NHibernateRepository;
using Sage.Platform.Orm;
using Sage.Platform.Orm.Attributes;
using Sage.Platform.Orm.Interfaces;
using Sage.Platform.Security;
using Sage.SalesLogix.Orm;
using log4net;
<#
// capture some global variables of entity state
var isHistory = (bool) tools.ExtendedProperty(entity, "{1589723D-0536-4BF3-BDD7-3F6F7FE165D0}", "IsHistoryTable");
OrmEntityProperty foreignProperty = null;
OrmRelationProperty relationProperty = null;
var isRelationProperty = false;
if (isHistory) {
    var foreignPropertyName = (string) tools.ExtendedProperty(entity, "{1589723D-0536-4BF3-BDD7-3F6F7FE165D0}", "ForeignIdProperty");
    foreignProperty = entity.GetPropertyByPropertyName(foreignPropertyName);
    relationProperty = foreignProperty as OrmRelationProperty;
	  isRelationProperty = relationProperty != null;    
}

var historyTypeName = (string) tools.ExtendedProperty(entity, "{1589723D-0536-4BF3-BDD7-3F6F7FE165D0}", "ResolvedHistoryType");
var isHistoryTable = (historyTypeName == "IHistory");
var generateAuditSupport = (entity.HasAuditedProperties && historyTypeName.Length > 0 && entity.HasAuditedProperties);

var hasDisplayProperty = (entity.DisplayProperty != null);

// composite key constants
var ck_useRelationships = entity.HasCompleteCompositeKeyRelationships;
#>
<# if (entity.HasCompositeKey) { #>
// Generating relationships for composite entity: <#= ck_useRelationships #>
<# } #>
namespace <#= @namespace #>
{
<#= generator.GetClassComments(entity) #>
    [Serializable]
    [TypeConverter(typeof(EntityReferenceConverter))]
<# if (entity.LocalResources.ContainsResource(entity.DisplayNameKey)) { #>
    [EntityResourcesDisplayName("<#= entity.DisplayNameKey #>")]
<# } #>
<# if (entity.LocalResources.ContainsResource(entity.DisplayNamePluralKey)) { #>
    [EntityResourcesPluralDisplayName("<#= entity.DisplayNamePluralKey #>")]
<# } #>
    public partial class <#= entity.Name #> : EntityBase, <#= entity.InterfaceName #>, ILifecycle, IComponentCreatingState<# if (entity.Audited) { #>, IAuditedEntity<# } #><# if (isHistory) { #>, IAuditTable<# } #><# if (hasDisplayProperty) { #>, INameable<# } #><# if(!entity.HasCompositeKey) { #>, IAssignableId<# } #><# if (securityService != null && securityService.EntityIsSecured(entity)) { #>, IOwnableEntity<# } #>
    {
<# if (hasDisplayProperty) { #>
        #region INameable interface

        object INameable.DisplayValue
        {
            get
            {
                return <#= entity.DisplayProperty.PropertyName #>;
            }
        }

        #endregion
<# } #>
        #region Fields

        static readonly ILog log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        private int _creating;

        /// <summary>
        /// <c>true</c> if the current object is being created.
        /// </summary>
        [Browsable(false)]
        public virtual bool Creating
        {
            get { return _creating > 0; }
            protected set
            {
                if (value) { _creating++; }
                else if (_creating > 0) { _creating--; }
            }
        }

        bool IComponentCreatingState.Creating {
            get {
                return Creating;
            }
            set {
                Creating = value;
            }
        }

        [Browsable(false)]
        public override Type EntityInterfaceType
        {
            get { return (typeof (<#= entity.InterfaceName #>)); }
        }

<# if (generateAuditSupport) { #>
        static <#= entity.Name #>()
        {
            InitializeAuditProperties();
        }

        #region Audit Support

        static IList<string> s_auditProperties;

        static void InitializeAuditProperties()
        {
            List<string> auditProperties = new List<string>();

<#  foreach (var prop in entity.GetAuditedProperties()) { #>
            auditProperties.Add("<#= prop.PropertyName #>");
<#  } #>

            s_auditProperties = new ReadOnlyCollection<string>(auditProperties);
        }

        /// <summary>
        /// Gets a value indicating whether this instance has changes.
        /// </summary>
        public override HistoryTableType HistoryTracking
        {
            get
            {
<#  if (isHistoryTable) { #>
                return HistoryTableType.History;
<#  } else { #>
                return HistoryTableType.Audit;
<#  } #>
            }
        }

        protected override IList<string> GetHistoryProperties()
        {
            return s_auditProperties;
        }

        public override object NewAuditEntry()
        {
<#  if (isHistoryTable) { #>
            IHistory h = (IHistory)EntityFactory.Create(typeof(<#= historyTypeName #>));
<#   var ACO = (OrmEntity) tools.ExtendedProperty(entity, "{1589723D-0536-4BF3-BDD7-3F6F7FE165D0}", "FindACOParent"); #>
<#   if (ACO.InterfaceName == "IAccount") { #>
            h.AccountId = Id;
<#   } else if (ACO.InterfaceName == "IContact") { #>
            h.ContactId = Id;
<#   } else { #>
            h.OpportunityId = Id;
<#   } #>
            return h;
<#  } else { #>
            IAuditTable at = (IAuditTable)EntityFactory.Create(typeof(<#= historyTypeName #>));
            at.SetEntity(this);
            return at;
<#  } #>
        }

        #endregion Audit Support
<# } #>

<# if (isHistory) { #>
        #region IAuditTable

        string IAuditTable.ForeignId
        {
            get
            {
<#  if (isRelationProperty) { #>
                return <#= relationProperty.PropertyName #>.Id.ToString();
<#  } else { #>
                return <#= foreignProperty.PropertyName #>;
<#  } #>
            }
        }

        void IAuditTable.SetEntity(object entity)
        {
<#  if (isRelationProperty) { #>
<#   if (relationProperty.Relationship.ChildProperty.Include) { #>
            <#= foreignProperty.PropertyName #> = (<#= relationProperty.Relationship.ParentEntity.InterfaceName #>)entity;
<#   } else { #>
            <#= foreignProperty.PropertyName #> = (<#= relationProperty.Relationship.ChildEntity.InterfaceName #>)entity;
<#   } #>
<#  } else { #>
            <#= foreignProperty.PropertyName #> = ((IComponentReference)entity).Id.ToString();
<#  } #>
        }

        /// <summary>
        /// Gets or sets the name of the field that was modified.
        /// </summary>
        string IAuditTable.FieldName
        {
            get { return FieldName; }
            set { FieldName = value; }
        }

        /// <summary>
        /// Gets or sets the old value.
        /// </summary>
        string IAuditTable.OldValue
        {
            get { return OldValue; }
            set { OldValue = value; }
        }

        /// <summary>
        /// Gets or sets the new value.
        /// </summary>
        string IAuditTable.NewValue
        {
            get { return NewValue; }
            set { NewValue = value; }
        }

        #endregion IAuditTable
<# } #>

<# foreach (var prop in generator.GetIncludedProperties(entity)) { #>
        private <#= generator.ToClrType(prop) #> _<#= prop.PropertyName #>;
<# } #>
<# if (entity.HasCompositeKey) { #>
<#  foreach (var keyProp in entity.KeyProperties) { #>
<#   if (!keyProp.Reference.Include) { #>
        private <#= generator.ToClrType(keyProp.Reference) #> _<#= keyProp.Reference.PropertyName #>;
<#   } #>
<#  } #>
<# } #>

<# if (securityService != null && securityService.EntityIsSecured(entity)) { #>
        private IOwner _LastPersistedOwner;
<# } #>

        #region Custom Properties
<# foreach (var prop in generator.GetIncludedCustomProperties(entity)) { #>
        <#= prop.CodeSnippet #>
<# } #>
        #endregion Custom Properties

<# // M:1 fields #>
        #region M:1 Fields

<# foreach (var relation in entity.ParentEntities) { #>
<#  if (relation.ChildProperty.Include) { #>
        private <#= relation.ParentEntity.InterfaceName #> _<#= relation.ChildProperty.PropertyName #>;
<#  } #>
<# } #>

        #endregion M:1 Fields

<# // ISet fields #>

<# if (entity.ChildEntities.Count > 0) { #>
        #region 1:M and M:1 fields

<#  foreach (var relation in entity.ChildEntities) { #>
<#   if (relation.ParentProperty.Include && relation.Cardinality == "1:M") { #>
        private EntitySet<<#= relation.ChildEntity.InterfaceName #>> _<#= relation.ParentProperty.PropertyName #>;
<#   } else if (relation.ParentProperty.Include && relation.Cardinality == "M:1") { #>
        private <#= relation.ChildEntity.InterfaceName #> _<#= relation.ParentProperty.PropertyName #>;
<#   } #>
<#  } #>

        #endregion 1:M and M:1 fields
<# } #>

        #endregion Fields

        #region Constructors

<# if (entity.IsExtension) { #>
        public <#= entity.Name #>(<#= entity.ExtendedEntity.InterfaceName #> parent)
            : this()
        {
            _<#= entity.ExtendedEntity.Name #> = parent;
            ActivateRelatedEntity(parent);
        }
<# } #>

        public <#= entity.Name #>()
        {
            InitializeCollectionFacades();
        }

        protected <#= entity.Name #>(bool createExtensions)
            : this()
        {
<# foreach (var child in entity.ExtensionEntities) { #>
            _<#= child.Name #> = new <#= child.Name #>(this);
            ActivateRelatedEntity(_<#= child.Name #>);
<# } #>
        }

        protected void InitializeCollectionFacades()
        {
<# foreach (var relation in entity.ChildEntities) { #>
<#  if (relation.ParentProperty.Include && relation.Cardinality == "1:M") { #>
            //Initialize <#= relation.ParentProperty.PropertyName #> Collection
            _<#= relation.ParentProperty.PropertyName #> = new EntitySet<<#= relation.ChildEntity.InterfaceName #>>(
                    item => HandleCollectionItemAdded("<#= relation.ParentProperty.PropertyName #>", item),
                    item => HandleCollectionItemRemoved("<#= relation.ParentProperty.PropertyName #>", item)
                );
            _<#= relation.ParentProperty.PropertyName #>.ItemChanged += (sender, args) => HandleCollectionItemChanged("<#= relation.ParentProperty.PropertyName #>", args.Item);
<#  } #>
<# } #>
        }

        #endregion Contructors

        #region Public Properties

<# var key = 0; #>
<# foreach (var prop in generator.GetIncludedProperties(entity)) { #>
<#  if (ck_useRelationships && prop is OrmFieldProperty && ((OrmFieldProperty) prop).IsKeyProperty) { #>
<#   if (entity.LocalResources.ContainsResource(prop.DisplayNameKey)) { #>
        [EntityResourcesDisplayName("<#= prop.DisplayNameKey #>")]
<#   } #>
        public virtual <#= generator.ToClrType(prop) #> <#= prop.PropertyName #>
        {
            get
            {
                if (<#= entity.GetRelationshipForKey((OrmFieldProperty) prop).ChildProperty.PropertyName #> == null || <#= entity.GetRelationshipForKey((OrmFieldProperty) prop).ChildProperty.PropertyName #>.Id == null)
                    return null;
                else
                    return <#= entity.GetRelationshipForKey((OrmFieldProperty) prop).ChildProperty.PropertyName #>.Id.ToString();
            }
        }
<#  } else { #>
<#   if (prop.OnBeforeChangeMethod != null || prop.OnAfterChangeMethod != null) { #>
        private const int _<#= prop.PropertyName #>Key = <#= key #>;
        private bool _<#= prop.PropertyName #>InSetter;
<#    key++; #>
<#   } #>

<#   var validators = prop.DataType.Validators; #>
<#   foreach (var dtv in validators) { #>
        <#= generator.GetValidatorAttribute(dtv) #>
<#   } #>
        <#= generator.GetTypeConverterAttribute(prop) #>
<#   if (entity.LocalResources.ContainsResource(prop.DisplayNameKey)) { #>
        [EntityResourcesDisplayName("<#= prop.DisplayNameKey #>")]
<#   } #>
        public virtual <#= generator.ToClrType(prop) #> <#= prop.PropertyName #>
        {
<#   if (securityService != null && securityService.EntityIsSecured(entity)) { #>
            get
            {
                if (GetPropertyAccess("<#= prop.PropertyName #>") == FieldAccess.NoAccess)
                    return default(<#= generator.ToClrType(prop) #>);

                return _<#= prop.PropertyName #>;
            }
<#   } else { #>
            get { return _<#= prop.PropertyName #>; }
<#   } #>
<#   if (!(prop is OrmFieldProperty && ((OrmFieldProperty) prop).IsReadOnly)) { #>
            set
            {
<#    if (prop.OnBeforeChangeMethod != null || prop.OnAfterChangeMethod != null) { #>
                if (_<#= prop.PropertyName #>InSetter)
                    throw new PropertyChangeEventException("Already executing the OnBefore / OnAfter business rule for the <#= entity.InterfaceName #>.<#= prop.PropertyName #> property.");

                _<#= prop.PropertyName #>InSetter = true;
                try
                {
<#    } #>
<#    if (securityService != null && securityService.EntityIsSecured(entity)) { #>
                    if (GetPropertyAccess("<#= prop.PropertyName #>") != FieldAccess.ReadWrite)
                        return;
<#    } #>
                    if (_<#= prop.PropertyName #> != value)
                    {
                        var oldValue = _<#= prop.PropertyName #>;
                        _<#= prop.PropertyName #> = value;

<#    if (prop.OnBeforeChangeMethod != null || prop.OnAfterChangeMethod != null) { #>
                        ExtendedPropertyChangedEventArgs args = null;
                        if (!Creating)
                        {
                            args = new ExtendedPropertyChangedEventArgs("_<#= prop.PropertyName #>", oldValue, value);
<#     if (prop.OnBeforeChangeMethod != null) { #>
                            OnBefore<#= prop.PropertyName #>Changed(args);

<#     } #>
                            if (args.NewValueSet)
                                _<#= prop.PropertyName #> = (<#= generator.ToClrType(prop) #>)args.NewValue;
                            args.SetReadOnly();
                        }
<#    } #>
                        ExtendedNotifyPropertyChanged("<#= prop.PropertyName #>", oldValue, value);
                        ValidateProperty("<#= prop.PropertyName #>", value);
<#    if (prop.OnAfterChangeMethod != null) { #>
                        if (!Creating)
                            _onAfterEvents[_<#= prop.PropertyName #>Key] = new PropertyChangedCommand(OnAfter<#= prop.PropertyName #>Changed, args);
<#    } #>
                    }
<#    if (prop.OnBeforeChangeMethod != null || prop.OnAfterChangeMethod != null) { #>
                }
                finally
                {
                    _<#= prop.PropertyName #>InSetter = false;
                }
<#    } #>
            }
<#   } #>
        }

<#   // OnBefore / OnAfter handlers #>
<#   if (prop.OnBeforeChangeMethod != null) { #>
<#    var method = prop.OnBeforeChangeMethod; #>
        private void OnBefore<#= prop.PropertyName #>Changed(EventArgs args)
        {
            if (rulesLog.IsDebugEnabled)
                rulesLog.Debug("<#= method #>()");

            var lib = DynamicMethodLibraryHelper.Instance;

            var methodArgs = new Object[] { this, args };
            lib.Execute("<#= method #>", methodArgs);
        }
<#   } #>

<#   if (prop.OnAfterChangeMethod != null) { #>
<#    var method = prop.OnAfterChangeMethod; #>
        private void OnAfter<#= prop.PropertyName #>Changed(EventArgs args)
        {
            if (rulesLog.IsDebugEnabled)
                rulesLog.Debug("<#= method #>()");

            var lib = DynamicMethodLibraryHelper.Instance;

            var methodArgs = new Object[] { this, args };
            lib.Execute("<#= method #>", methodArgs);
        }
<#   } #>
<#  } #>
<# } #>

        #region Child M:1 Relationships

<# foreach (var relation in entity.ParentEntities) { #>
<#  if (relation.ChildProperty.Include) { #>
<#   if (relation.ChildProperty.OnBeforeChangeMethod != null || relation.ChildProperty.OnAfterChangeMethod != null) { #>
        private const int _<#= relation.ChildProperty.PropertyName #>Key = <#= key #>;
        private bool _<#= relation.ChildProperty.PropertyName #>InSetter;
<#    key++; #>
<#   } #>
<#   if (entity.LocalResources.ContainsResource(relation.ChildProperty.DisplayNameKey)) { #>
        [EntityResourcesDisplayName("<#= relation.ChildProperty.DisplayNameKey #>")]
<#   } #>
        public virtual <#= relation.ParentEntity.InterfaceName #> <#= relation.ChildProperty.PropertyName #>
        {
            get
            {
                ActivateRelatedEntity(_<#= relation.ChildProperty.PropertyName #>);
                return _<#= relation.ChildProperty.PropertyName #>;
            }
            set
            {
                bool noaccess = false;
                try
                {
                    Utility.Unwrap(_<#= relation.ChildProperty.PropertyName #>);
                }
                catch (ObjectNotFoundException)
                {
                    _<#= relation.ChildProperty.PropertyName #> = null;
                    noaccess = true;
                }
                if (!Equals(_<#= relation.ChildProperty.PropertyName #>, value) || noaccess)
                {
                    var oldValue = _<#= relation.ChildProperty.PropertyName #>;
                    _<#= relation.ChildProperty.PropertyName #> = value;

<#   if (relation.ChildProperty.OnBeforeChangeMethod != null || relation.ChildProperty.OnAfterChangeMethod != null) { #>
                    ExtendedPropertyChangedEventArgs args = null;
                    if (!Creating)
                    {
                        args = new ExtendedPropertyChangedEventArgs("<#= relation.ChildProperty.PropertyName #>", oldValue, value);
<#    if (relation.ChildProperty.OnBeforeChangeMethod != null) { #>
                        OnBefore<#= relation.ChildProperty.PropertyName #>Changed(args);
<#    } #>
                        if (args.NewValueSet)
                            _<#= relation.ChildProperty.PropertyName #> = value;
                        args.SetReadOnly();
                    }
<#   } #>
                    ExtendedNotifyPropertyChanged("<#= relation.ChildProperty.PropertyName #>", oldValue, value);
                    ActivateRelatedEntity(value);
<#   if (relation.ChildProperty.OnAfterChangeMethod != null) { #>
                    if (!Creating)
                        _onAfterEvents[_<#= relation.ChildProperty.PropertyName #>Key] = new PropertyChangedCommand(OnAfter<#= relation.ChildProperty.PropertyName #>Changed, args);
<#   } #>
                }
            }
        }
<#   // OnBefore / OnAfter handlers #>
<#   if (relation.ChildProperty.OnBeforeChangeMethod != null) { #>
<#    var method = relation.ChildProperty.OnBeforeChangeMethod; #>
        private void OnBefore<#= relation.ChildProperty.PropertyName #>Changed(EventArgs args)
        {
            if (rulesLog.IsDebugEnabled)
                rulesLog.Debug("<#= method #>()");

            var lib = DynamicMethodLibraryHelper.Instance;

            var methodArgs = new Object[] { this, args };
            lib.Execute("<#= method #>", methodArgs);
        }
<#   } #>

<#   if (relation.ChildProperty.OnAfterChangeMethod != null) { #>
<#    var method = relation.ChildProperty.OnAfterChangeMethod; #>
        private void OnAfter<#= relation.ChildProperty.PropertyName #>Changed(EventArgs args)
        {
            if (rulesLog.IsDebugEnabled)
                rulesLog.Debug("<#= method #>()");

            var lib = DynamicMethodLibraryHelper.Instance;

            var methodArgs = new Object[] { this, args };
            lib.Execute("<#= method #>", methodArgs);
        }
<#   } #>
<#  } #>
<# } #>

        #endregion Child M:1 Relationships

<# if (entity.ChildEntities.Count > 0) { #>
        #region 1:M Relationships
<#  foreach (var relation in entity.ChildEntities) { #>
<#   if (relation.ParentProperty.Include && relation.Cardinality == "1:M") { #>
<#    if (entity.LocalResources.ContainsResource(relation.ParentProperty.DisplayNameKey)) { #>
        [EntityResourcesDisplayName("<#= relation.ParentProperty.DisplayNameKey #>")]
<#    } #>
        public virtual ICollection<<#= relation.ChildEntity.InterfaceName #>> <#= relation.ParentProperty.PropertyName #>
        {
            get
            {
                if (_<#= relation.ParentProperty.PropertyName #> == null)
                {
                    _<#= relation.ParentProperty.PropertyName #> = new EntitySet<<#= relation.ChildEntity.InterfaceName #>>(
                            item => HandleCollectionItemAdded("<#= relation.ParentProperty.PropertyName #>", item),
                            item => HandleCollectionItemRemoved("<#= relation.ParentProperty.PropertyName #>", item)
                        );
                    _<#= relation.ParentProperty.PropertyName #>.ItemChanged += (sender, args) => HandleCollectionItemChanged("<#= relation.ParentProperty.PropertyName #>", args.Item);
                }

                return _<#= relation.ParentProperty.PropertyName #>;
            }
        }

<#   } else if (relation.ParentProperty.Include && relation.Cardinality == "M:1") { #>
<#    if (relation.ParentProperty.OnBeforeChangeMethod != null || relation.ParentProperty.OnAfterChangeMethod != null) { #>
        private const int _<#= relation.ParentProperty.PropertyName #>Key = <#= key #>;
        private bool _<#= relation.ParentProperty.PropertyName #>InSetter;
<#     key++; #>
<#    } #>
<#    if (entity.LocalResources.ContainsResource(relation.ParentProperty.DisplayNameKey)) { #>
        [EntityResourcesDisplayName("<#= relation.ParentProperty.DisplayNameKey #>")]
<#    } #>
        public virtual <#= relation.ChildEntity.InterfaceName #> <#= relation.ParentProperty.PropertyName #>
        {
            get
            {
                ActivateRelatedEntity(_<#= relation.ParentProperty.PropertyName #>);
                return _<#= relation.ParentProperty.PropertyName #>;
            }
            set
            {
                bool noaccess = false;
                try
                {
                    Utility.Unwrap (_<#= relation.ParentProperty.PropertyName #>);
                }
                catch (ObjectNotFoundException)
                {
                    _<#= relation.ParentProperty.PropertyName #> = null;
                    noaccess = true;
                }
                if (!Equals(_<#= relation.ParentProperty.PropertyName #>, value) || noaccess)
                {
<#    if (relation.ParentProperty.PropertyName == "Owner" && securityService != null && securityService.EntityIsSecured(entity)) { #>
                    if (_LastPersistedOwner == null)
                    {
                        _LastPersistedOwner = _<#= relation.ParentProperty.PropertyName #>;
                    }
<#    } #>
                    var oldValue = _<#= relation.ParentProperty.PropertyName #>;
                    _<#= relation.ParentProperty.PropertyName #> = value;

<#    if (relation.ParentProperty.OnBeforeChangeMethod != null || relation.ParentProperty.OnAfterChangeMethod != null) { #>
                    ExtendedPropertyChangedEventArgs args = null;
                    if (!Creating)
                    {
                        args = new ExtendedPropertyChangedEventArgs("_<#= relation.ParentProperty.PropertyName #>", oldValue, value);
<#     if (relation.ParentProperty.OnBeforeChangeMethod != null) { #>
                        OnBefore<#= relation.ParentProperty.PropertyName #>Changed(args);
<#     } #>
                        if (args.NewValueSet)
                            _<#= relation.ParentProperty.PropertyName #> = value;
                        args.SetReadOnly();
                    }
<#    } #>
                    ExtendedNotifyPropertyChanged("<#= relation.ParentProperty.PropertyName #>", oldValue, value);

<#    if (relation.ParentProperty.OnAfterChangeMethod != null) { #>
                    if (!Creating)
                        _onAfterEvents[_<#= relation.ParentProperty.PropertyName #>Key] = new PropertyChangedCommand(OnAfter<#= relation.ParentProperty.PropertyName #>Changed, args);
<#    } #>
                }
            }
        }

<#    // OnBefore / OnAfter handlers #>
<#    if (relation.ParentProperty.OnBeforeChangeMethod != null) { #>
<#     var method = relation.ParentProperty.OnBeforeChangeMethod; #>
        private void OnBefore<#= relation.ParentProperty.PropertyName #>Changed(EventArgs args)
        {
            if (rulesLog.IsDebugEnabled)
                rulesLog.Debug("<#= method #>()");

            var lib = DynamicMethodLibraryHelper.Instance;

            var methodArgs = new Object[] { this, args };
            lib.Execute("<#= method #>", methodArgs);
        }
<#    } #>

<#    if (relation.ParentProperty.OnAfterChangeMethod != null) { #>
<#     var method = relation.ParentProperty.OnAfterChangeMethod; #>
        private void OnAfter<#= relation.ParentProperty.PropertyName #>Changed(EventArgs args)
        {
            if (rulesLog.IsDebugEnabled)
                rulesLog.Debug("<#= method #>()");

            var lib = DynamicMethodLibraryHelper.Instance;

            var methodArgs = new Object[] { this, args };
            lib.Execute("<#= method #>", methodArgs);
        }
<#    } #>
<#   } #>
<#  } #>

        #endregion 1:M Relationships
<# } #>

        #endregion

<# if (entity.IsExtension) { #>
        #region 1:1 Parent Entity Extension

        private <#= entity.ExtendedEntity.InterfaceName #> _<#= entity.ExtendedEntity.Name #>;

        public virtual <#= entity.ExtendedEntity.InterfaceName #> <#= entity.ExtendedEntity.Name #>
        {
            get
            {
                ActivateRelatedEntity(_<#= entity.ExtendedEntity.Name #>);
                return _<#= entity.ExtendedEntity.Name #>;
            }
            set
            {
                ActivateRelatedEntity(value);
                _<#= entity.ExtendedEntity.Name #> = value;
            }
        }

        #endregion 1:1 Parent Entity Extension
<# } #>

<# if (entity.ExtensionEntities.Count > 0) { #>
        #region Child extensions
<#  foreach (var child in entity.ExtensionEntities) { #>
        private <#= child.InterfaceName #> _<#= child.Name #>;

        public virtual <#= child.InterfaceName #> <#= child.Name #>
        {
            get
            {
                if (_<#= child.Name #> == null)
                {
                    _<#= child.Name #> = new <#= child.Name #>(this);
                }
                ActivateRelatedEntity(_<#= child.Name #>, "<#= child.Name #>");
                return _<#= child.Name #>;
            }
            set
            {
                ActivateRelatedEntity(value, "<#= child.Name #>");
                _<#= child.Name #> = value;
            }
        }
<#  } #>
        #endregion
<# } #>

        #region Equals, HashCode and ToString Overrides
        /// <summary>
        /// local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj)
        {
            if (this == obj) return true;

            if (obj == null) return false;

            var castObj = obj as <#= entity.Name #>;
            if (castObj == null) return false;

            return castObj.GetHashCode() == GetHashCode();
        }

        /// <summary>
        /// local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode()
        {
<# if (entity.HasCompositeKey) { #>
<#  if (ck_useRelationships) { #>
            if (<#= tools.List(entity.KeyProperties, keyProp => "(" + entity.GetRelationshipForKey(keyProp.Reference).ChildProperty.PropertyName + " != null)", " && ") #>
                && <#= tools.List(entity.KeyProperties, keyProp => "(" + entity.GetRelationshipForKey(keyProp.Reference).ChildProperty.PropertyName + ".Id != null)", " && ") #>)
            {
                return (<#= tools.List(entity.KeyProperties, keyProp => entity.GetRelationshipForKey(keyProp.Reference).ChildProperty.PropertyName + ".Id.GetHashCode()", " + ") #>);
            }
<#  } else { #>
            if (<#= tools.List(entity.KeyProperties, keyProp => "(_" + keyProp.Reference.PropertyName + " != null)", " && ") #>)
            {
                return (<#= tools.List(entity.KeyProperties, keyProp => "_" + keyProp.Reference.PropertyName + ".GetHashCode()", " + ") #> );
            }
<#  } #>
<# } else { #>
            if (_Id != null)
<#  if (entity.IsExtension) { #>
                return _Id.GetHashCode() + GetType().GetHashCode();
<#  } else { #>
                return _Id.GetHashCode();
<#  } #>
<# } #>
            else
                return base.GetHashCode();
        }

        public override string ToString()
        {
            <#= generator.GetToString(entity) #>
        }

        #endregion

        #region CRUD events

<# if (entity.OnAfterInsertMethod != null) { #>
        protected override void OnAfterInsert()
        {
            base.OnAfterInsert();

            var lib = DynamicMethodLibraryHelper.Instance;

            var methodArgs = new Object[] { this };

            lib.Execute("<#= entity.OnAfterInsertMethod #>", methodArgs);
        }
<# } #>

<# if (entity.OnAfterUpdateMethod != null) { #>
        protected override void OnAfterUpdate()
        {
            base.OnAfterUpdate();

            var lib = DynamicMethodLibraryHelper.Instance;

            var methodArgs = new Object[] { this };

            lib.Execute("<#= entity.OnAfterUpdateMethod #>", methodArgs);
        }
<# } #>

<# if (entity.OnAfterDeleteMethod != null) { #>
        protected override void OnAfterDelete()
        {
            base.OnAfterDelete();
            var lib = DynamicMethodLibraryHelper.Instance;
            var methodArgs = new Object[] { this };
            lib.Execute("<#= entity.OnAfterDeleteMethod #>", methodArgs);
        }
<# } #>

        public override  void Delete()
        {
            ISession session = SessionFactoryHolder.HolderInstance.CreateSession();
            try
            {
                using (var ts = new TransactionScope(TransactionMode.Inherits))
                {
                    session.Evict(this);
                    session.Delete(this);
                }
            }
            finally
            {
                SessionFactoryHolder.HolderInstance.ReleaseSession(session);
            }
        }

        public override void Save()
        {
            ISession session = SessionFactoryHolder.HolderInstance.CreateSession();
            try
            {
<# if (entity.OnBeforeUpdateMethod != null) { #>
                if (PersistentState == PersistentState.Modified)
                {
                    _OnBeforeUpdate(this, session);
                }
<# } #>
<# if (entity.ExtensionEntities.Count > 0) { #>
                #region 1:1 extension update handlers
<#  foreach (var child in entity.ExtensionEntities) { #>
                if (<#= child.Name #>.PersistentState == PersistentState.Modified)
                {
                    <#= @namespace #>.<#= child.Name #>._OnBeforeUpdate(<#= child.Name #>, session);
                }
<#  } #>
                #endregion 1:1 extension update handlers
<# } #>

                if ((PersistentState & PersistentState.New) == PersistentState.New)
                {
                    session.Save(this);
                }
                else
                {
                    session.Update(this);
                }
<# if (securityService != null && securityService.EntityIsSecured(entity)) { #>
                _LastPersistedOwner = _Owner;
<# } #>
                session.Flush();
                PersistentState = PersistentState.Unmodified;
                OnPersisted();
                ClearChanges();
            }
            finally
            {
                SessionFactoryHolder.HolderInstance.ReleaseSession(session);
            }
        }

<# if (!entity.HasCompositeKey) { #>
        private string _Id;
        public virtual string Id
        {
            get
            {
                return _Id;
            }
        }

        object IAssignableId.Id
        {
            get { return _Id; }
            set { _Id = value != null ? value.ToString() : null; }
        }
<# } else { #>
        public virtual object[] Ids
        {
            get
            {
<#  if (entity.KeyProperties.Count > 0) { #>
                object[] idvalues = new object[<#=entity.KeyProperties.Count #>];
<#   foreach (var keyProp in entity.KeyProperties) { #>
<#    var keyordinal = keyProp.OrdinalPosition - 1; #>
<#    if (ck_useRelationships) { #>
                idvalues[<#= keyordinal #>] = <#= entity.GetRelationshipForKey(keyProp.Reference).ChildProperty.PropertyName #>.Id;
<#    } else { #>
                idvalues[<#= keyordinal #>] = _<#= keyProp.Reference.PropertyName #>;
<#    } #>
<#   } #>
                return idvalues;
<#  } #>
            }
        }
<# } #>
        #endregion CRUD events

        #region Static Methods

        /// <summary>
        /// Creates a new instance and executes the OnCreate business rules.
        /// </summary>
        public static <#= entity.InterfaceName #> Create()
        {
            return Create(EntityCreationOption.ExecuteBusinessRules);
        }

        /// <summary>
        /// Creates a new instance and optionally executes the OnCreate business rules.
        /// </summary>
        /// <param name="executeBusinessRules"><c>true</c> if the OnCreate business rules should be run.</param>
        public static <#= entity.InterfaceName #> Create(EntityCreationOption executeBusinessRules)
        {
            if (log.IsDebugEnabled) {
                if (executeBusinessRules == EntityCreationOption.ExecuteBusinessRules) {
                    log.Debug("Creating new instance of <#= entity.InterfaceName #>.  Executing OnCreate business rules.");
                } else {
                    log.Debug("Creating new instance of <#= entity.InterfaceName #>.  Not executing OnCreate business rules.");
                }
            }
            var instance = new <#= entity.Name #>(true);
            if (executeBusinessRules == EntityCreationOption.ExecuteBusinessRules) {
                instance.Creating = true;
                try
                {
                    var lib = DynamicMethodLibraryHelper.Instance;
                    var methodArgs = new Object[] { instance };
                    lib.Execute("<#= entity.OnCreate #>", methodArgs);
                }
                finally
                {
                    instance.Creating = false;
                }
            }
            return instance;
        }

        #endregion Static Methods

        #region ILifecycle Members

<# if (entity.OnBeforeDeleteMethod != null) { #>
        LifecycleVeto ILifecycle.OnDelete(ISession s)
        {
            var lib = DynamicMethodLibraryHelper.Instance;
            var methodArgs = new Object[] { this, s };
            lib.Execute("<#= entity.OnBeforeDeleteMethod #>", methodArgs);
            return LifecycleVeto.NoVeto;
        }
<# } #>
        void ILifecycle.OnLoad(ISession s, object id)
        {
        }

<# if (entity.OnBeforeInsertMethod != null) { #>
        LifecycleVeto ILifecycle.OnSave(ISession s)
        {
            var lib = DynamicMethodLibraryHelper.Instance;

            var methodArgs = new Object[] { this, s };

            lib.Execute("<#= entity.OnBeforeInsertMethod #>", methodArgs);

            return LifecycleVeto.NoVeto;
        }
<# } #>

<# if (entity.OnBeforeUpdateMethod != null) { #>
        LifecycleVeto ILifecycle.OnUpdate(ISession s)
        {
            return LifecycleVeto.NoVeto;
        }

        internal static void _OnBeforeUpdate(<#= entity.InterfaceName #> entity, ISession s)
        {
            var lib = DynamicMethodLibraryHelper.Instance;

            var methodArgs = new Object[] { entity, s };

            lib.Execute("<#= entity.OnBeforeUpdateMethod #>", methodArgs);
        }
<# } #>
        #endregion

        #region IPersistentEntity Members

        void IPersistentEntity.Delete()
        {
            Delete();
        }

        void IPersistentEntity.Save()
        {
            Save();
        }


        #endregion

<# if (!entity.HasCompositeKey) { #>
        #region IComponentReference Members

        object IComponentReference.Id
        {
            get { return Id; }
        }


        #endregion
<# } #>


        static readonly ILog rulesLog = LogManager.GetLogger("BusinessRules.<#= entity.Name #>");

<# var methods = entity.Methods; #>
<# if (methods.Count > 0) { #>
        #region Business Rule Methods
<#  foreach (var method in methods) { #>
        public virtual <#= method.ReturnType #> <#= method.MethodName #>(<#= tools.FormatParamDeclarationList(method) #>)
        {
            if (rulesLog.IsDebugEnabled)
                rulesLog.Debug("<#= method #>()");

            var lib = DynamicMethodLibraryHelper.Instance;

            var methodArgs = new Object[] { <#= tools.FormatParamList(method) #> };
<#   if (method.ReturnType == "void") { #>
            lib.Execute("<#= method #>", methodArgs);
<#   } else { #>
            return (<#= method.ReturnType #>)lib.Execute("<#= method #>", methodArgs);
<#   } #>
        }

<#  } #>

        #endregion Business Rule Methods

<# } #>
<# if (securityService != null && securityService.EntityIsSecured(entity)) { #>
        #region Implementation of IOwnableEntity

        object IOwnableEntity.Owner
        {
            get
            {
                if (_LastPersistedOwner == null)
                {
                     _LastPersistedOwner = Owner;
                }

                return _LastPersistedOwner;
            }
        }

        #endregion
<# } #>

        #region Dynamic Properties

        protected override object GetPropertyValue(string propertyName)
        {
            switch (propertyName)
            {
<# foreach (var prop in generator.GetIncludedProperties(entity)) { #>
                case "<#= prop.PropertyName #>":
                    return <#= prop.PropertyName #>;
<# } #>
<# foreach (var relation in entity.ParentEntities) { #>
<#  if (relation.ChildProperty.Include) { #>
                case "<#= relation.ChildProperty.PropertyName #>":
                    return <#= relation.ChildProperty.PropertyName #>;
<#  } #>
<# } #>
<# foreach (var relation in entity.ChildEntities) { #>
<#  if (relation.ParentProperty.Include && relation.Cardinality == "M:1") { #>
                case "<#= relation.ParentProperty.PropertyName #>":
                    return <#= relation.ParentProperty.PropertyName #>;
<#  } #>
<# } #>
<# if (entity.IsExtension) { #>
                case "<#= entity.ExtendedEntity.Name #>":
                    return <#= entity.ExtendedEntity.Name #>;
<# } #>
<#  foreach (var child in entity.ExtensionEntities) { #>
                case "<#= child.Name #>":
                    return <#= child.Name #>;
<# } #>
            }

            return base.GetPropertyValue(propertyName);
        }

        protected override void SetPropertyValue(string propertyName, object value)
        {
            switch (propertyName)
            {
<# foreach (var prop in generator.GetIncludedProperties(entity)) { #>
<#  if (!(prop is OrmFieldProperty && ((ck_useRelationships && ((OrmFieldProperty)prop).IsKeyProperty) || ((OrmFieldProperty)prop).IsReadOnly))) { #>
                case "<#= prop.PropertyName #>":
                    <#= prop.PropertyName #> = (<#= generator.ToClrType(prop) #>) value;
                    break;
<#  } #>
<# } #>
<# foreach (var relation in entity.ParentEntities) { #>
<#  if (relation.ChildProperty.Include) { #>
                case "<#= relation.ChildProperty.PropertyName #>":
                    <#= relation.ChildProperty.PropertyName #> = (<#= relation.ParentEntity.InterfaceName #>) value;
                    break;
<#  } #>
<# } #>
<# foreach (var relation in entity.ChildEntities) { #>
<#  if (relation.ParentProperty.Include && relation.Cardinality == "M:1") { #>
                case "<#= relation.ParentProperty.PropertyName #>":
                    <#= relation.ParentProperty.PropertyName #> = (<#= relation.ChildEntity.InterfaceName #>) value;
                    break;
<#  } #>
<# } #>
<# if (entity.IsExtension) { #>
                case "<#= entity.ExtendedEntity.Name #>":
                    <#= entity.ExtendedEntity.Name #> = (<#= entity.ExtendedEntity.InterfaceName #>) value;
                    break;
<# } #>
<#  foreach (var child in entity.ExtensionEntities) { #>
                case "<#= child.Name #>":
                    <#= child.Name #> = (<#= child.InterfaceName #>) value;
                    break;
<# } #>
            }

            base.SetPropertyValue(propertyName, value);
        }

        #endregion
    }
}
<#+
[Dependency]
public IDictionary Context { get; set; }
#>]]></template>
  <description>Default SalesLogix persistence class template</description>
</codeTemplate>
