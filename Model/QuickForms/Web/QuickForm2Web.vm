#if(${isEntityForm})
  #set($pageType = "Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider")
  #set($interfaceType = "Sage.Platform.Controls.IEntityForm")
  #set($adapterType = "Sage.Platform.WebPortal.Adapters.EntityFormAdapter")
#else
  #set($pageType = "Sage.Platform.WebPortal.SmartParts.SmartPartInfoProvider")
  #set($interfaceType = "Sage.Platform.Controls.IForm")
  #set($adapterType = "Sage.Platform.WebPortal.Adapters.FormAdapter")
#end
<%@ Control Language="C#" ClassName="${generator.FormName}" Inherits="${pageType}" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>

#macro(dospans)#if(${control.RowSpan} > 1) rowspan="${control.RowSpan}"#end#if($control.ColumnSpan > 1) colspan="${control.ColumnSpan}"#end#end
#macro(makestarttable)<table border="0" cellpadding="1" cellspacing="0" class="formtable#if($generator.HasAbsoluteCols) formtable_fixed#end">
  #foreach($columnDef in $quickform.Columns)
   #if($columnDef.SizeType == "Absolute")
    <col width="${generator.GetColumnWidthString($columnDef)}px" />
   #elseif($columnDef.SizeType == "Percent")
    <col width="${generator.GetColumnWidthString($columnDef)}%" />
   #else
    <col />
   #end
  #end
#end
#if($controls.Count == 1)
  #foreach($control in $controls)$generator.parseControl($control)#end
#elseif($controls.Count > 1)
#makestarttable()
#foreach($rowindex in [1..${quickform.Rows.Count}])
<tr>
  #foreach($colindex in [1..${quickform.Columns.Count}])
    #set($realRowIndex = $rowindex - 1) #set($realColIndex = $colindex - 1)
    #set($control = ${generator.getControlByCell($realColIndex, $realRowIndex)})
    #if($control.ControlId == "IsEmpty")
      <td></td>
    #elseif($control.ControlId != "IsSpan")
      <td #if($control.RowSpan > 1)rowspan="${control.RowSpan}" #end #if($control.ColumnSpan > 1)colspan="${control.ColumnSpan}" #end>
$generator.parseControl($control)
      </td>
    #end
  #end
</tr>
#end
</table>
#end ##if control.Count > 0

#if($hiddencontrols.Count > 0)
 #foreach($control in $hiddencontrols)
  $generator.parseControl($control)
 #end
#end

#if($ltools.Count > 0)
 <SalesLogix:SmartPartToolsContainer runat="server" ID="${generator.FormName}_LTools" ToolbarLocation="left">
 #foreach($tool in $ltools)
  $generator.parseControl($tool)
 #end
 </SalesLogix:SmartPartToolsContainer>
#end
#if($ctools.Count > 0)
 <SalesLogix:SmartPartToolsContainer runat="server" ID="${generator.FormName}_CTools" ToolbarLocation="center">
 #foreach($tool in $ctools)
  $generator.parseControl($tool)
 #end
 </SalesLogix:SmartPartToolsContainer>
#end
#if(($rtools.Count > 0) || ($generator.HelpFileName != ""))
 <SalesLogix:SmartPartToolsContainer runat="server" ID="${generator.FormName}_RTools" ToolbarLocation="right">
 #foreach($tool in $rtools)
  $generator.parseControl($tool)
 #end
 #if($generator.HelpFileName != "")<SalesLogix:PageLink ID="lnk${generator.FormName}Help" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="${generator.HelpFileName}" ImageUrl="${generator.getImageResourceURL("Help_16x16")}"></SalesLogix:PageLink>#end
 </SalesLogix:SmartPartToolsContainer>
#end

<script runat="server" type="text/C#">
#if(${isEntityForm})
public override Type EntityType
{
	get { return typeof($entitytype); }
}
#end
#macro(genBinding $bind $controlid)
#if($bind.DataItemName != "--- Custom Element ---") 
#if($bind.DataSourceID == "MainEntity")
#if(${generator.isIdentifierExpression("${bind.DataItemName}")})
        // ${controlid}.${generator.GetControlPropertyName($bind, $control)} Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding ${controlid}${generator.GetControlPropertyName($bind, $control)}Binding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("${generator.GetDataPropertyName($bind, $control)}", $controlid, "${generator.GetControlPropertyName($bind, $control)}"#if($bind.NullValueString != "" || $bind.FormatString != ""), "${bind.FormatString}", #if($bind.NullValueString == "null")null#else"${bind.NullValueString}"#end#end);
#if(!${generator.isPrimaryBinding($bind, $control)})
        ${controlid}${generator.GetControlPropertyName($bind, $control)}Binding.IgnoreFLSDisabling = true;
#end
        BindingSource.Bindings.Add(${controlid}${generator.GetControlPropertyName($bind, $control)}Binding);
#else
        // ${controlid}.${generator.GetControlPropertyName($bind, $control)} Binding 
        Sage.Platform.EntityBinding.ExpressionBinding ${controlid}${generator.GetControlPropertyName($bind, $control)}Binding = new Sage.Platform.EntityBinding.ExpressionBinding("${bind.DataItemName}", $controlid, "${generator.GetControlPropertyName($bind, $control)}");
        ${controlid}${generator.GetControlPropertyName($bind, $control)}Binding.CompileExpression = false;
        ${controlid}${generator.GetControlPropertyName($bind, $control)}Binding.NegateBooleanValue = ${generator.GetInvertedControlPropertyValue($bind, $control)};
        ${controlid}${generator.GetControlPropertyName($bind, $control)}Binding.NullValue = #if($bind.NullValueString == "null")null#else"${bind.NullValueString}"#end;
        BindingSource.Bindings.Add(${controlid}${generator.GetControlPropertyName($bind, $control)}Binding);
#end
#else
#if(${generator.isIdentifierExpression("${bind.DataItemName}")})
        // ${controlid}.${generator.GetControlPropertyName($bind, $control)} Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding ${controlid}${generator.GetControlPropertyName($bind, $control)}Binding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("${generator.GetDataPropertyName($bind, $control)}", $controlid, "${generator.GetControlPropertyName($bind, $control)}"#if($bind.NullValueString != "" || $bind.FormatString != ""), "${bind.FormatString}", #if($bind.NullValueString == "null")null#else"${bind.NullValueString}"#end#end);
        ${bind.DataSourceID}.Bindings.Add(${controlid}${generator.GetControlPropertyName($bind, $control)}Binding);
#else
        // ${controlid}.${generator.GetControlPropertyName($bind, $control)} Binding
        Sage.Platform.EntityBinding.ExpressionBinding ${controlid}${generator.GetControlPropertyName($bind, $control)}Binding = new Sage.Platform.EntityBinding.ExpressionBinding("${bind.DataItemName}", $controlid, "${generator.GetControlPropertyName($bind, $control)}");
        ${controlid}${generator.GetControlPropertyName($bind, $control)}Binding.CompileExpression = false;
        ${controlid}${generator.GetControlPropertyName($bind, $control)}Binding.NegateBooleanValue = ${generator.GetInvertedControlPropertyValue($bind, $control)};
        ${controlid}${generator.GetControlPropertyName($bind, $control)}Binding.NullValue = #if($bind.NullValueString == "null")null#else"${bind.NullValueString}"#end;
        ${bind.DataSourceID}.Bindings.Add(${controlid}${generator.GetControlPropertyName($bind, $control)}Binding);
#end
#end
#end
#end

#foreach($dscontrol in $dscontrols)
 $generator.parseControl($dscontrol)
#end

#if(${isEntityForm})
protected override void OnAddEntityBindings() { 
#foreach($control in $controls)
 #if($control.ImplementsIEntityBindingProvider)
  BindingSource.AddBindingProvider(${control.ControlId} as Sage.Platform.EntityBinding.IEntityBindingProvider);
 #end
 #if(($control.DataSource) && ($control.DataSource != "") && (${control.BoundCollectionPropertyName}))
  #if(${control.BoundCollectionPropertyName} != "")
   ${control.DataSource}.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("${control.BoundCollectionPropertyName}", ${control.ControlId} ));
   ${control.DataSource}.BindFieldNames = new String[] { ${control.GetDataFieldNames} };
  #else
   ${control.DataSource}.Bindings.Add(new Sage.Platform.Mashups.Web.WebMashupBinding(${control.ControlId}));
  #end
 #else
  #if($control.DataBindings.Count == 0)

  #end
 #end
 #foreach($binding in $control.DataBindings)
  #if($control.EmptyTableRowText)  ##this means it is a datagrid
   #set($ctlid = $control.DataSource)
  #else
   #set($ctlid = $control.ControlId)
  #end
  #genBinding($binding $ctlid) 
  #if(($generator.IsPropertyShared($binding, $control)) && ($control.ControlLabelPlacement != "none") && ($control.Caption != ""))#set($ctlid = $control.LabelId)#genBinding($binding $ctlid) #end
 #end
#end ##foreach control

#foreach($dscontrol in $dscontrols)
  #if($dscontrol.ControlId != "MainEntity")
   BindingSource.OnCurrentEntitySet += new EventHandler(${dscontrol.ControlId}_OnCurrentEntitySet);
  #end
#end ##foreach dscontrol

#foreach($control in $rtools)
 #if($control.DataBindings.Count > 0)
  #foreach($binding in $control.DataBindings)
   #set($ctlid = $control.ControlId)
   #genBinding($binding $ctlid)
  #end
 #end
#end
}
#end

#if(!$IsPrintView)
#foreach($control in $controls)$generator.getControlServerCode($control)#end
#foreach($tool in $ltools)$generator.getControlServerCode($tool)#end
#foreach($tool in $ctools)$generator.getControlServerCode($tool)#end
#foreach($tool in $rtools)$generator.getControlServerCode($tool)#end

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 $generator.getEventHandlerWireUpCode
}

#end
$generator.getFormServerCode


public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    #if(${isEntityForm} && ${quickform.UseEntityNameAsTitle})
	if (BindingSource != null)
	{
		if (BindingSource.Current != null)
		{
			tinfo.Description = BindingSource.Current.ToString();
			tinfo.Title = BindingSource.Current.ToString();
		}
	}
    #end
	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
					#if($IsPrintView)
						if (tool is PageLink)
						{
							PageLink plink = tool as PageLink;
							if (plink.LinkType == enumPageLinkType.HelpFileName)
							{
					#end
						tinfo.RightTools.Add(tool);
					#if($IsPrintView)
							}
						}
					#end
					}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
	#if($image != "")tinfo.ImagePath = Page.ResolveClientUrl("${generator.getImageResourceURL(${image})}");#end
	return tinfo;
}

private ${interfaceType} _formAdapter;

public ${interfaceType} FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new ${formname}Adapter(this)); }
}

public class ${formname}Adapter : ${adapterType}, Sage.Form.Interfaces.I${formname}
{
	public ${formname}Adapter(${pageType} smartPart)
		: base(smartPart) {}

#foreach ($control in $generator.GetIncludedControls())
	private ${control.TypeName} _${control.ControlName};
	public ${control.TypeName} ${control.ControlName}
	{
		get { return FindControl(ref _${control.ControlName}, "${control.ControlName}"); }
	}
#end

#foreach ($method in $generator.GetEventHandlers())
	public void ${method.MethodName}(System.EventArgs e)
	{
		Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
		Object[] methodArgs = new Object[] { this, e };
		lib.Execute("$method.ToString()", methodArgs);
	}
#end
}

</script>

<script type="text/javascript">
#foreach($control in $controls)$generator.getControlClientScript($control)#end
</script>
